/* Enter a unique ExecutionPlan */
@Plan:name('IsAnalytics-ExecutionPlan-SessionData')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */


@Import('org.wso2.is.analytics.stream.OverallSession:1.0.0')
define stream SessionStream (meta_tenantId int, sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, action int, username string, userstoreDomain string, remoteIp string, region string, tenantDomain string, serviceProvider string, identityProviders string, rememberMeFlag bool, userAgent string, _timestamp long);

@Export('org.wso2.is.analytics.stream.SessionStatPerMinute:1.0.0')
define stream SessionStatPerMinute (meta_tenantId int, bucketId long, bucketStart long, bucketEnd long, year int, month int, day int, hour int, minute int, activeSessionCount long, newSessionCount long, terminatedSessionCount long);

@from(eventtable = 'analytics.table', table.name = 'ORG_WSO2_IS_ANALYTICS_STREAM_ACTIVESESSIONS', primary.keys = 'meta_tenantId, sessionId' , indices = 'meta_tenantId, sessionId , startTimestamp, renewTimestamp, terminationTimestamp, year, month, day, hour, minute, action, username, userstoreDomain, remoteIp, region, tenantDomain, rememberMeFlag, userAgent',  wait.for.indexing = 'true', merge.schema = 'false')
define table activeSessionsTable (meta_tenantId int, sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, year int, month int, day int, hour int, minute int, action int, username string, userstoreDomain string, remoteIp string, region string, tenantDomain string, serviceProvider string, identityProviders string, rememberMeFlag bool, userAgent string, usernameWithTenantDomainAndUserstoreDomain string);

@Export('org.wso2.is.analytics.stream.SessionInfo:1.0.0')
define stream SessionStreamInfo (meta_tenantId int, sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, endTimestamp long, year int, month int, day int, hour int, minute int, duration long, isActive bool, username string, userstoreDomain string, remoteIp string, tenantDomain string, serviceProvider string, identityProviders string, rememberMeFlag bool, usernameWithTenantDomainAndUserstoreDomain string);

from SessionStream
select meta_tenantId, sessionId, startTimestamp, renewTimestamp, terminationTimestamp, action, username, userstoreDomain, remoteIp, region, tenantDomain, serviceProvider, identityProviders, rememberMeFlag, userAgent, time:timestampInMilliseconds() as _timestamp
insert into IntermediateSessionStream;

from IntermediateSessionStream [action == 1 OR action == 2]#window.timeBatch(1 sec)
select meta_tenantId, sessionId, startTimestamp, renewTimestamp, terminationTimestamp, time:extract(startTimestamp, 'year') as year, time:extract(startTimestamp, 'month') as month, time:extract(startTimestamp, 'day') as day, time:extract(startTimestamp, 'hour') as hour, time:extract(startTimestamp, 'minute') as minute, action, username, userstoreDomain, remoteIp, region, tenantDomain, serviceProvider, identityProviders, rememberMeFlag, userAgent, ifThenElse(userstoreDomain is null OR userstoreDomain == "" OR tenantDomain is null OR tenantDomain == "", username, str:concat(userstoreDomain, '/', username, '@', tenantDomain)) as usernameWithTenantDomainAndUserstoreDomain
insert into activeSessionsTable;

from IntermediateSessionStream [action == 1 OR action == 2]
select meta_tenantId, sessionId, startTimestamp, renewTimestamp, terminationTimestamp, convert(-1, 'long') as endTimestamp, time:extract(startTimestamp, 'year') as year, time:extract(startTimestamp, 'month') as month, time:extract(startTimestamp, 'day') as day, time:extract(startTimestamp, 'hour') as hour, time:extract(startTimestamp, 'minute') as minute, (_timestamp - startTimestamp) as duration, true as isActive, username, userstoreDomain, remoteIp, tenantDomain, serviceProvider, identityProviders, rememberMeFlag, ifThenElse(userstoreDomain is null OR userstoreDomain == "" OR tenantDomain is null OR tenantDomain == "", username, str:concat(userstoreDomain, '/', username, '@', tenantDomain)) as usernameWithTenantDomainAndUserstoreDomain
insert into SessionStreamInfo;

from IntermediateSessionStream [action == 0]
select meta_tenantId, sessionId, startTimestamp, renewTimestamp, terminationTimestamp, terminationTimestamp as endTimestamp, time:extract(startTimestamp, 'year') as year, time:extract(startTimestamp, 'month') as month, time:extract(startTimestamp, 'day') as day, time:extract(startTimestamp, 'hour') as hour, time:extract(startTimestamp, 'minute') as minute, (terminationTimestamp - startTimestamp) as duration,  false as isActive, username, userstoreDomain, remoteIp, tenantDomain, serviceProvider, identityProviders, rememberMeFlag, ifThenElse(userstoreDomain is null OR userstoreDomain == "" OR tenantDomain is null OR tenantDomain == "", username, str:concat(userstoreDomain, '/', username, '@', tenantDomain)) as usernameWithTenantDomainAndUserstoreDomain
insert into SessionStreamInfo;

from SessionStreamInfo[isActive == false]#window.timeBatch(1 sec)
delete activeSessionsTable
on activeSessionsTable.sessionId == sessionId AND activeSessionsTable.meta_tenantId == meta_tenantId;

from IntermediateSessionStream[action == 1 OR action == 0]#window.externalTimeBatch(_timestamp, 1 min, 0, 2 min) as s join activeSessionsTable as t
select s.meta_tenantId, (s._timestamp - s._timestamp%60000) as bucketId, sum(s.action) as newSessionCount, sum(1 - s.action) as terminatedSessionCount, (ifThenElse(count(t.sessionId) is null, convert(0, 'long'), count(t.sessionId))) as activeSessionCount
group by s.meta_tenantId
insert into BucketStream;

from BucketStream#window.length(1)
select meta_tenantId, bucketId, bucketId as bucketStart, (bucketId + 60000) as bucketEnd, time:extract(bucketId, 'year') as year, time:extract(bucketId, 'month') as month, time:extract(bucketId, 'day') as day, time:extract(bucketId, 'hour') as hour, time:extract(bucketId, 'minute') as minute, activeSessionCount,  newSessionCount, terminatedSessionCount
group by meta_tenantId
insert into SessionStatPerMinute;