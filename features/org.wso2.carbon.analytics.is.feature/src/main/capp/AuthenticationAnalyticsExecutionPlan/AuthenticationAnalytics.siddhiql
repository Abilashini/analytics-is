/* Enter a unique ExecutionPlan */
@Plan:name('AuthenticationAnalyticsExecutionPlan')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('authentication-analytics-stream:1.0.0')
define stream inStream (contextId string, eventId string, authenticationSuccess bool, userName string, userStoreDomain string, tenantDomain string, remoteIp string, inboundAuthType string, serviceprovider string, remembermeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeperated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, isFederated bool, _timestamp long);

@Export('is-user-region-stat-per-minute:1.0.0')
define stream perMinRegionStream (year int, month int, day int, hour int, minute int, region string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-authentication-stat-per-minute:1.0.0')
define stream perMinAuthenticationStatStream (year int, month int, day int, hour int, minute int, userName string, rolesCommaSeperated string, serviceprovider string, identityProvider string, region string,userStoreDomain string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-userstore-authentication-stat-per-minute:1.0.0')
define stream perMinUserStoreStream (year int, month int, day int, hour int, minute int, userStoreDomain string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-role-authentication-stat-per-minute:1.0.0')
define stream perMinRoleStream (year int, month int, day int, hour int, minute int, userName string, role string, serviceprovider string, identityProvider string, region string,userStoreDomain string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-identity-provider-authentication-stat-per-minute:1.0.0')
define stream perMinIdentityProviderStream (year int, month int, day int, hour int, minute int, identityProvider string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-service-provider-authentication-stat-per-minute:1.0.0')
define stream perMinServiceProviderStream (year int, month int, day int, hour int, minute int, serviceprovider string, authSuccessCount long, authFailureCount long, facetStartTime string, isFirstLoginCount bool,isFederated bool, _timestamp long);

@Export('is-user-authentication-stat-per-minute:1.0.0')
define stream perMinUserStream (year int, month int, day int, hour int, minute int, userName string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool,_timestamp long);


from inStream
select eventId,userName,userStoreDomain, tenantDomain, remoteIp, 'region' as region, inboundAuthType, serviceprovider, remembermeEnabled, forceAuthEnabled, passiveAuthEnabled, rolesCommaSeperated, authenticationStep, identityProvider, authStepSuccess, stepAuthenticator, isFirstLogin,ifThenElse(authenticationSuccess == true, 1, 0) as successValue,ifThenElse(authenticationSuccess == false, 1, 0) as failureValue,ifThenElse(isFirstLogin == true, 1, 0) as firstLoginValue,isFederated,_timestamp
insert into countStream;

from countStream
select maxForever(_timestamp) as startTime,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,userStoreDomain,successValue, failureValue,firstLoginValue, isFederated
insert into countMaxTimestampStream;

from countMaxTimestampStream#isAnalytics:duplicator(rolesCommaSeperated,";")
select startTime,userName,role,serviceprovider,identityProvider,region,userStoreDomain,successValue, failureValue, isFederated
insert into countMaxDuplicatedTimestampStream;

from countMaxDuplicatedTimestampStream#window.externalTimeBatch(startTime, 1 min, 0, 10 sec)
select startTime,userName,role,serviceprovider,identityProvider,region,userStoreDomain,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, isFederated
group by userName,role,serviceprovider,identityProvider,region,userStoreDomain,isFederated
insert into perMinRoleTempStatStream;


from countMaxTimestampStream#window.externalTimeBatch(startTime, 1 min, 0, 10 sec)
select time:extract(startTime, 'year') as year, time:extract(startTime, 'month') as month, time:extract(startTime, 'day') as day, time:extract(startTime, 'hour') as hour, time:extract(startTime, 'minute') as minute,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,userStoreDomain,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(startTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(startTime) as _timestamp
group by userName,rolesCommaSeperated,serviceprovider,identityProvider,region,userStoreDomain,isFederated
insert into perMinAuthenticationStatStream;

from countMaxTimestampStream#window.externalTimeBatch(startTime, 1 min, 0, 10 sec)
select time:extract(startTime, 'year') as year, time:extract(startTime, 'month') as month, time:extract(startTime, 'day') as day, time:extract(startTime, 'hour') as hour, time:extract(startTime, 'minute') as minute,userName,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(startTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(startTime) as _timestamp
group by userName,isFederated
insert into perMinUserStream;

from countMaxTimestampStream#window.externalTimeBatch(startTime, 1 min, 0, 10 sec)
select time:extract(startTime, 'year') as year, time:extract(startTime, 'month') as month, time:extract(startTime, 'day') as day, time:extract(startTime, 'hour') as hour, time:extract(startTime, 'minute') as minute,identityProvider,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(startTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(startTime) as _timestamp
group by identityProvider,isFederated
insert into perMinIdentityProviderStream;

from countMaxTimestampStream#window.externalTimeBatch(startTime, 1 min, 0, 10 sec)
select time:extract(startTime, 'year') as year, time:extract(startTime, 'month') as month, time:extract(startTime, 'day') as day, time:extract(startTime, 'hour') as hour, time:extract(startTime, 'minute') as minute,userStoreDomain,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(startTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(startTime) as _timestamp
group by userStoreDomain,isFederated
insert into perMinUserStoreStream;

from perMinRoleTempStatStream
select time:extract(startTime, 'year') as year, time:extract(startTime, 'month') as month, time:extract(startTime, 'day') as day, time:extract(startTime, 'hour') as hour, time:extract(startTime, 'minute') as minute,userName,role,serviceprovider,identityProvider,region,userStoreDomain, authSuccessCount, authFailureCount, convert(isAnalytics:getMinuteStartingTime(startTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(startTime) as _timestamp
insert into perMinRoleStream;

from countMaxTimestampStream#window.externalTimeBatch(startTime, 1 min, 0, 10 sec)
select time:extract(startTime, 'year') as year, time:extract(startTime, 'month') as month, time:extract(startTime, 'day') as day, time:extract(startTime, 'hour') as hour, time:extract(startTime, 'minute') as minute,serviceprovider,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(startTime), 'string') as facetStartTime, false as isFirstLoginCount,isFederated, isAnalytics:getMinuteStartingTime(startTime) as _timestamp
group by userStoreDomain,isFederated
insert into perMinServiceProviderStream;

from countMaxTimestampStream#window.externalTimeBatch(startTime, 1 min, 0, 10 sec)
select time:extract(startTime, 'year') as year, time:extract(startTime, 'month') as month, time:extract(startTime, 'day') as day, time:extract(startTime, 'hour') as hour, time:extract(startTime, 'minute') as minute,serviceprovider,sum(firstLoginValue) as authSuccessCount, 0l as authFailureCount, convert(isAnalytics:getMinuteStartingTime(startTime), 'string') as facetStartTime, true as isFirstLoginCount,isFederated, isAnalytics:getMinuteStartingTime(startTime) as _timestamp
group by userStoreDomain,isFederated
insert into perMinServiceProviderStream;

from countMaxTimestampStream#window.externalTimeBatch(startTime, 1 min, 0, 10 sec)
select time:extract(startTime, 'year') as year, time:extract(startTime, 'month') as month, time:extract(startTime, 'day') as day, time:extract(startTime, 'hour') as hour, time:extract(startTime, 'minute') as minute,region,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(startTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(startTime) as _timestamp
group by region,isFederated
insert into perMinRegionStream;