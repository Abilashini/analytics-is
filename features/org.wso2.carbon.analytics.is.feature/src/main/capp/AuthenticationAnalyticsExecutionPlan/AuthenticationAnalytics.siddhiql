/* Enter a unique ExecutionPlan */
@Plan:name('AuthenticationAnalyticsExecutionPlan')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('authentication-analytics-stream:1.0.0')
define stream inStream (contextId string, eventId string, authenticationSuccess bool, userName string, userStoreDomain string, tenantDomain string, remoteIp string, inboundAuthType string, serviceprovider string, remembermeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeperated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, isFederated bool, _timestamp long);

@Export('is-service-provider-authentication-stat-per-minute:1.0.0')
define stream perMinServiceProviderStream (year int, month int, day int, hour int, minute int, serviceprovider string, authSuccessCount long, authFailureCount long, authFirstSuccessCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-authentication-stat-per-minute:1.0.0')
define stream perMinAuthenticationStatStream (year int, month int, day int, hour int, minute int, userName string, rolesCommaSeperated string, serviceprovider string, identityProvider string, remoteIp string, region string, userStoreDomain string, authSuccessCount long, authFailureCount long, authStepSuccessCount long,facetStartTime string, isFederated bool, _timestamp long);

@Export('is-user-region-stat-per-minute:1.0.0')
define stream perMinRegionStream (year int, month int, day int, hour int, minute int, remoteIp string, region string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool, _timestamp long);


@Export('is-userstore-authentication-stat-per-minute:1.0.0')
define stream perMinUserStoreStream (year int, month int, day int, hour int, minute int, userStoreDomain string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-role-authentication-stat-per-minute:1.0.0')
define stream perMinRoleStream (year int, month int, day int, hour int, minute int, userName string, role string, serviceprovider string, identityProvider string, remoteIp string, region string,userStoreDomain string, authSuccessCount long, authFailureCount long,authStepSuccessCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-identity-provider-authentication-stat-per-minute:1.0.0')
define stream perMinIdentityProviderStream (year int, month int, day int, hour int, minute int, identityProvider string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool, _timestamp long);

@Export('is-user-authentication-stat-per-minute:1.0.0')
define stream perMinUserStream (year int, month int, day int, hour int, minute int, userName string, authSuccessCount long, authFailureCount long, facetStartTime string, isFederated bool,_timestamp long);


from inStream
select eventId,userName,userStoreDomain, tenantDomain, remoteIp, remoteIp as region, inboundAuthType, serviceprovider, remembermeEnabled, forceAuthEnabled, passiveAuthEnabled, rolesCommaSeperated, authenticationStep, ifThenElse(identityProvider is null, "NOTSPECIFIED", identityProvider) as identityProvider, authStepSuccess, stepAuthenticator, isFirstLogin,ifThenElse(authenticationSuccess == true, 1, 0) as successValue,ifThenElse(authStepSuccess == false, 1, 0) as failureValue,ifThenElse(authStepSuccess == true, 1, 0) as stepSuccessValue,ifThenElse(authStepSuccess == true AND isFirstLogin == true, 1, 0) as firstLoginValue,isFederated,_timestamp
insert into countStream;

from inStream
select eventId,userName,userStoreDomain, tenantDomain, remoteIp, remoteIp as region, inboundAuthType, serviceprovider, remembermeEnabled, forceAuthEnabled, passiveAuthEnabled, rolesCommaSeperated, authenticationStep,ifThenElse(identityProvider is null, "NOTSPECIFIED", identityProvider) as identityProvider, authStepSuccess, stepAuthenticator, isFirstLogin,ifThenElse(authStepSuccess == true, 1, 0) as successValue,ifThenElse(authStepSuccess == false, 1, 0) as failureValue,isFederated,_timestamp
insert into countForIdentityProviderStream;

from countStream#isAnalytics:duplicator(rolesCommaSeperated)
select _timestamp,userName,role,serviceprovider,identityProvider,remoteIp,region,userStoreDomain,successValue, failureValue,stepSuccessValue, isFederated
insert into countMaxDuplicatedTimestampStream;

from countMaxDuplicatedTimestampStream#externalTimeBatch(_timestamp, 1 min, 0, 10 sec)
select batchEndTime,userName,role,serviceprovider,identityProvider,remoteIp,region,userStoreDomain,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount,sum(stepSuccessValue) as authStepSuccessCount, isFederated
group by userName,role,serviceprovider,identityProvider,region,userStoreDomain,isFederated
insert into perMinRoleTempStatStream;

from countStream#externalTimeBatch(_timestamp, 1 min, 0, 10 sec)
select time:extract(batchEndTime, 'year') as year, time:extract(batchEndTime, 'month') as month, time:extract(batchEndTime, 'day') as day, time:extract(batchEndTime, 'hour') as hour, time:extract(batchEndTime, 'minute') as minute,userName,rolesCommaSeperated,serviceprovider,identityProvider,remoteIp,region,userStoreDomain,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount,sum(stepSuccessValue) as authStepSuccessCount, convert(isAnalytics:getMinuteStartingTime(batchEndTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(batchEndTime) as _timestamp
group by userName,rolesCommaSeperated,serviceprovider,identityProvider,region,userStoreDomain,isFederated
insert into perMinAuthenticationStatStream;


from countStream#externalTimeBatch(_timestamp, 1 min, 0, 10 sec)
select time:extract(batchEndTime, 'year') as year, time:extract(batchEndTime, 'month') as month, time:extract(batchEndTime, 'day') as day, time:extract(batchEndTime, 'hour') as hour, time:extract(batchEndTime, 'minute') as minute,userName,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(batchEndTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(batchEndTime) as _timestamp
group by userName,isFederated
insert into perMinUserStream;

from countForIdentityProviderStream#externalTimeBatch(_timestamp, 1 min, 0, 10 sec)
select time:extract(batchEndTime, 'year') as year, time:extract(batchEndTime, 'month') as month, time:extract(batchEndTime, 'day') as day, time:extract(batchEndTime, 'hour') as hour, time:extract(batchEndTime, 'minute') as minute,identityProvider,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(batchEndTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(batchEndTime) as _timestamp
group by identityProvider,isFederated
insert into perMinIdentityProviderStream;

from countStream#externalTimeBatch(_timestamp, 1 min, 0, 10 sec)
select time:extract(batchEndTime, 'year') as year, time:extract(batchEndTime, 'month') as month, time:extract(batchEndTime, 'day') as day, time:extract(batchEndTime, 'hour') as hour, time:extract(batchEndTime, 'minute') as minute,userStoreDomain,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(batchEndTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(batchEndTime) as _timestamp
group by userStoreDomain,isFederated
insert into perMinUserStoreStream;

from perMinRoleTempStatStream
select time:extract(batchEndTime, 'year') as year, time:extract(batchEndTime, 'month') as month, time:extract(batchEndTime, 'day') as day, time:extract(batchEndTime, 'hour') as hour, time:extract(batchEndTime, 'minute') as minute,userName,role,serviceprovider,identityProvider,remoteIp,region,userStoreDomain, authSuccessCount, authFailureCount,authStepSuccessCount, convert(isAnalytics:getMinuteStartingTime(batchEndTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(batchEndTime) as _timestamp
insert into perMinRoleStream;

from countStream#externalTimeBatch(_timestamp, 1 min, 0, 10 sec)
select time:extract(batchEndTime, 'year') as year, time:extract(batchEndTime, 'month') as month, time:extract(batchEndTime, 'day') as day, time:extract(batchEndTime, 'hour') as hour, time:extract(batchEndTime, 'minute') as minute,serviceprovider,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount,sum(firstLoginValue) as  authFirstSuccessCount, convert(isAnalytics:getMinuteStartingTime(batchEndTime), 'string') as facetStartTime,isFederated, isAnalytics:getMinuteStartingTime(batchEndTime) as _timestamp
group by serviceprovider,isFederated
insert into perMinServiceProviderStream;

from countStream#externalTimeBatch(_timestamp, 1 min, 0, 10 sec)
select time:extract(batchEndTime, 'year') as year, time:extract(batchEndTime, 'month') as month, time:extract(batchEndTime, 'day') as day, time:extract(batchEndTime, 'hour') as hour, time:extract(batchEndTime, 'minute') as minute,remoteIp,region,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, convert(isAnalytics:getMinuteStartingTime(batchEndTime), 'string') as facetStartTime, isFederated, isAnalytics:getMinuteStartingTime(batchEndTime) as _timestamp
group by region,isFederated
insert into perMinRegionStream;