<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>is_stat_analytics</Name>
    <Script>
        CREATE TEMPORARY TABLE rawAnalyticsData USING CarbonAnalytics
        OPTIONS (tableName "AUTHENTICATION-ANALYTICS-STREAM",
        schema "eventId STRING, _timestamp LONG, authenticationSuccess BOOLEAN,userName STRING,userStoreDomain STRING,tetantDomain STRING,remoteIp STRING,region STRING,inboundAuthType STRING,serviceprovider STRING,remembermeEnabled BOOLEAN,forceAuthEnabled BOOLEAN,passiveAuthEnabled BOOLEAN,rolesCommaSeperated STRING,role STRING,authenticationStep STRING,identityProvider STRING,authStepSuccess BOOLEAN,stepAuthenticator STRING, isFirstLogin BOOLEAN, isFederated BOOLEAN");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerMinute USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Authentication-Stat-per-Minute",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, minute INT -i, userName FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, minute, userName, isFederated", incrementalParams "isUserAuthenticationAnalyticsPerMinute, 60", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerHour USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Authentication-Stat-per-Hour",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, userName FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, userName, isFederated", incrementalParams "isUserAuthenticationAnalyticsPerHour, 3600", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerDay USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Authentication-Stat-per-Day",
        schema "year INT -i, month INT -i, day INT -i, userName FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, userName, isFederated", incrementalParams "isUserAuthenticationAnalyticsPerDay, 86400", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerMonth USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Authentication-Stat-per-Month",
        schema "year INT -i, month INT -i, userName FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, userName, isFederated", incrementalParams "isUserAuthenticationAnalyticsPerMonth, 2628000", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerYear USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Authentication-Stat-per-Year",
        schema "year INT -i, userName FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, userName, isFederated", incrementalParams "isUserAuthenticationAnalyticsPerYear, 31536000", mergeSchema "false");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerDay USING CarbonAnalytics
        OPTIONS (tableName "Is-Role-Authentication-Stat-per-Day",
        schema "year INT -i, month INT -i,day INT -i, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG,facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, userName,role,serviceprovider,identityProvider,region, isFederated", incrementalParams "isRoleAuthenticationAnalyticsPerDay, 86400", mergeSchema "false");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerMonth USING CarbonAnalytics
        OPTIONS (tableName "Is-Role-Authentication-Stat-per-Month",
        schema "year INT -i, month INT -i, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG,facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, userName,role,serviceprovider,identityProvider,region, isFederated", incrementalParams "isRoleAuthenticationAnalyticsPerMonth, 2628000", mergeSchema "false");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerYear USING CarbonAnalytics
        OPTIONS (tableName "Is-Role-Authentication-Stat-per-Year",
        schema "year INT -i, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG,facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, userName,role,serviceprovider,identityProvider,region, isFederated", incrementalParams "isRoleAuthenticationAnalyticsPerYear, 31536000", mergeSchema "false");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerMinute USING CarbonAnalytics
        OPTIONS (tableName "Is-Role-Authentication-Stat-per-Minute",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, minute INT -i, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG,facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, minute, userName,role,serviceprovider,identityProvider,region, isFederated", incrementalParams "isRoleAuthenticationAnalyticsPerMinute, 60", mergeSchema "false");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerHour USING CarbonAnalytics
        OPTIONS (tableName "Is-Role-Authentication-Stat-per-Hour",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG,facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, userName,role,serviceprovider,identityProvider,region, isFederated", incrementalParams "isRoleAuthenticationAnalyticsPerHour, 3600", mergeSchema "false");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerDay USING CarbonAnalytics
        OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Day",
        schema "year INT -i, month INT -i, day INT -i, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFirstLoginCount BOOLEAN -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, serviceprovider, isFirstLoginCount, isFederated", incrementalParams "isServiceProviderAuthenticationAnalyticsPerDay, 86400", mergeSchema "false");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerMonth USING CarbonAnalytics
        OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Month",
        schema "year INT -i, month INT -i, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFirstLoginCount BOOLEAN -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, serviceprovider, isFirstLoginCount, isFederated", incrementalParams "isServiceProviderAuthenticationAnalyticsPerMonth, 2628000", mergeSchema "false");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerYear USING CarbonAnalytics
        OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Year",
        schema "year INT -i, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFirstLoginCount BOOLEAN -i, isFederated BOOLEAN -i",
        primaryKeys "year, serviceprovider, isFirstLoginCount, isFederated", incrementalParams "isServiceProviderAuthenticationAnalyticsPerYear, 31536000", mergeSchema "false");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerMinute USING CarbonAnalytics
        OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Minute",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, minute INT -i, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFirstLoginCount BOOLEAN -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, minute, serviceprovider, isFirstLoginCount, isFederated", incrementalParams "isServiceProviderAuthenticationAnalyticsPerMinute, 60", mergeSchema "false");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerHour USING CarbonAnalytics
        OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Hour",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFirstLoginCount BOOLEAN -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, serviceprovider, isFirstLoginCount, isFederated", incrementalParams "isServiceProviderAuthenticationAnalyticsPerHour, 3600", mergeSchema "false");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerDay USING CarbonAnalytics
        OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Day",
        schema "year INT -i, month INT -i, day INT -i, identityProvider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, identityProvider, isFederated", incrementalParams "isIdentityProviderAuthenticationAnalyticsPerDay, 86400", mergeSchema "false");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerMonth USING CarbonAnalytics
        OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Month",
        schema "year INT -i, month INT -i, identityProvider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, identityProvider, isFederated", incrementalParams "isIdentityProviderAuthenticationAnalyticsPerMonth, 2628000", mergeSchema "false");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerYear USING CarbonAnalytics
        OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Year",
        schema "year INT -i, identityProvider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, identityProvider, isFederated", incrementalParams "isIdentityProviderAuthenticationAnalyticsPerYear, 31536000", mergeSchema "false");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerMinute USING CarbonAnalytics
        OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Minute",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, minute INT -i, identityProvider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, minute, identityProvider, isFederated", incrementalParams "isIdentityProviderAuthenticationAnalyticsPerMinute, 60", mergeSchema "false");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerHour USING CarbonAnalytics
        OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Hour",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, identityProvider FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, identityProvider, isFederated", incrementalParams "isIdentityProviderAuthenticationAnalyticsPerHour, 3600", mergeSchema "false");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerDay USING CarbonAnalytics
        OPTIONS (tableName "Is-Authentication-Stat-per-Day",
        schema "year INT -i, month INT -i,day INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG,facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, userName,rolesCommaSeperated,serviceprovider,identityProvider,region, isFederated", incrementalParams "isAuthenticationAnalyticsPerDay, 86400", mergeSchema "false");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerMonth USING CarbonAnalytics
        OPTIONS (tableName "Is-Authentication-Stat-per-Month",
        schema "year INT -i, month INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, userName,rolesCommaSeperated,serviceprovider,identityProvider,region, isFederated", incrementalParams "isAuthenticationAnalyticsPerMonth, 2628000", mergeSchema "false");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerYear USING CarbonAnalytics
        OPTIONS (tableName "Is-Authentication-Stat-per-Year",
        schema "year INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, userName,rolesCommaSeperated,serviceprovider,identityProvider,region, isFederated", incrementalParams "isAuthenticationAnalyticsPerYear, 31536000", mergeSchema "false");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerMinute USING CarbonAnalytics
        OPTIONS (tableName "Is-Authentication-Stat-per-Minute",
        schema "year INT -i, month INT -i,day INT -i,hour INT -i, minute INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG,facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, minute, userName,rolesCommaSeperated,serviceprovider,identityProvider,region, isFederated", incrementalParams "isAuthenticationAnalyticsPerMinute, 60", mergeSchema "false");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerHour USING CarbonAnalytics
        OPTIONS (tableName "Is-Authentication-Stat-per-Hour",
        schema "year INT -i, month INT -i,day INT -i,hour INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG,facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, userName,rolesCommaSeperated,serviceprovider,identityProvider,region, isFederated", incrementalParams "isAuthenticationAnalyticsPerHour, 3600", mergeSchema "false");

        CREATE TEMPORARY TABLE isUniqueAuthenticationAnalytics USING CarbonAnalytics
        OPTIONS (tableName "Is-Unique-Authentication-Stats",
        schema "userName STRING -i,serviceprovider STRING -i,identityProvider STRING -i,rolesCommaSeperated STRING -i, authenticationSuccess BOOLEAN -i,remoteIp STRING -i,userStoreDomain STRING -i,tenantDomain STRING -i,timestampValue LONG -i, isFederated BOOLEAN -i",
        primaryKeys "userName, serviceprovider,identityProvider,rolesCommaSeperated,authenticationSuccess,remoteIp,userStoreDomain,tenantDomain,timestampValue, isFederated", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerDay USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Day",schema "year INT -i, month INT -i, day INT -i, userStoreDomain FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",primaryKeys "year, month, day, userStoreDomain, isFederated", incrementalParams "isUserstoreAuthenticationAnalyticsPerDay, 86400", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerMonth USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Month",schema "year INT -i, month INT -i, userStoreDomain FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",primaryKeys "year, month, userStoreDomain, isFederated", incrementalParams "isUserstoreAuthenticationAnalyticsPerMonth, 2628000", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerYear USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Year",schema "year INT -i, userStoreDomain FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",primaryKeys "year, userStoreDomain, isFederated", incrementalParams "isUserstoreAuthenticationAnalyticsPerYear, 31536000", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerMinute USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Minute",schema "year INT -i, month INT -i, day INT -i, hour INT -I, minute INT -i, userStoreDomain FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",primaryKeys "year, month, day, hour, minute, userStoreDomain, isFederated", incrementalParams "isUserstoreAuthenticationAnalyticsPerMinute, 60", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerHour USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Hour",schema "year INT -i, month INT -i, day INT -i, hour INT -I, userStoreDomain FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",primaryKeys "year, month, day, hour, userStoreDomain, isFederated", incrementalParams "isUserstoreAuthenticationAnalyticsPerHour, 3600", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserRegionStatPerMinute USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Region-Stat-per-Minute",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, minute INT -i, region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, minute, userName, isFederated", incrementalParams "isUserRegionStatPerMinute, 60", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserRegionStatPerHour USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Region-Stat-per-Hour",
        schema "year INT -i, month INT -i, day INT -i, hour INT -i, region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, hour, region, isFederated", incrementalParams "isUserRegionStatPerHour, 3600", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserRegionStatPerDay USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Region-Stat-per-Day",
        schema "year INT -i, month INT -i, day INT -i, region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, day, region, isFederated", incrementalParams "isUserRegionStatPerDay, 86400", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserRegionStatPerMonth USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Region-Stat-per-Month",
        schema "year INT -i, month INT -i, region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, month, region, isFederated", incrementalParams "isUserRegionStatPerMonth, 2628000", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserRegionStatPerYear USING CarbonAnalytics
        OPTIONS (tableName "Is-User-Region-Stat-per-Year",
        schema "year INT -i, region FACET -i, authSuccessCount LONG -sp,authFailureCount LONG -sp, _timestamp LONG, facetStartTime FACET -i, isFederated BOOLEAN -i",
        primaryKeys "year, region, isFederated", incrementalParams "isUserRegionStatPerYear, 31536000", mergeSchema "false");

        INSERT INTO TABLE isRoleAuthenticationAnalyticsPerMinute SELECT year, month,day,hour,minute,userName,role,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount, cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime, isFederated,getMinuteStartingTime(year, month, day, hour,minute) as _timestamp FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.role is NULL then failureTbl.role ELSE successTbl.role END) as role,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount, (CASE WHEN failureTbl.isFederated is NULL then successTbl.isFederated ELSE failureTbl.isFederated END) as isFederated   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.userName as userName,authSuccesses.role as role,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.region as region,count(authSuccesses.eventId) as authSuccessCount, authSuccesses.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month,getDay(cast(_timestamp as BIGINT)) as day,getHour(cast(_timestamp as BIGINT)) as hour,getMinute(cast(_timestamp as BIGINT)) as minute,eventId,userName,role,serviceprovider,identityProvider,region,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.role,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.region,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute, authSuccesses.isFederated) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.userName as userName,authFailures.role as role,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.region as  region,count(authFailures.eventId) as authFailureCount, authFailures.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month,getDay(cast(_timestamp as BIGINT)) as day,getHour(cast(_timestamp as BIGINT)) as hour,getMinute(cast(_timestamp as BIGINT)) as minute,eventId,userName,role,serviceprovider,identityProvider,region,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authStepSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.role,authFailures.serviceprovider,authFailures.identityProvider,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute, authFailures.isFederated) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.role = failureTbl.role AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute AND successTbl.isFederated = failureTbl.isFederated) result;

        INSERT INTO TABLE isRoleAuthenticationAnalyticsPerHour SELECT year, month,day,hour,userName,role,serviceprovider,identityProvider,region,SUM(authSuccessCount),SUM(authFailureCount),cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime, isFederated,getHourStartingTime(year, month, day, hour) as _timestamp FROM isRoleAuthenticationAnalyticsPerMinute GROUP BY userName, role, serviceprovider, identityProvider, region, year, month, day, hour, isFederated;

        INCREMENTAL_TABLE_COMMIT isRoleAuthenticationAnalyticsPerMinute;

        INSERT INTO TABLE isRoleAuthenticationAnalyticsPerDay SELECT year, month,day,userName,role,serviceprovider,identityProvider,region,SUM(authSuccessCount),SUM(authFailureCount),cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime, isFederated, getDateStartingTime(year, month, day) as _timestamp FROM isRoleAuthenticationAnalyticsPerHour GROUP BY userName, role, serviceprovider, identityProvider, region, year, month, day, isFederated;

        INCREMENTAL_TABLE_COMMIT isRoleAuthenticationAnalyticsPerHour;

        INSERT INTO TABLE isRoleAuthenticationAnalyticsPerMonth SELECT year, month,userName,role,serviceprovider,identityProvider,region,SUM(isRoleAuthenticationAnalyticsPerDay.authSuccessCount) as authSuccessCount,SUM(isRoleAuthenticationAnalyticsPerDay.authFailureCount) as authFailureCount,cast(getMonthStartingTime(year, month) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, month) as _timestamp FROM isRoleAuthenticationAnalyticsPerDay GROUP BY userName, role, serviceprovider, identityProvider, region, year, month, isFederated;

        INCREMENTAL_TABLE_COMMIT isRoleAuthenticationAnalyticsPerDay;

        INSERT INTO TABLE isRoleAuthenticationAnalyticsPerYear SELECT year, userName,role,serviceprovider,identityProvider,region,SUM(authSuccessCount),SUM(authFailureCount),cast(getMonthStartingTime(year, 1) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, 1) as _timestamp FROM isRoleAuthenticationAnalyticsPerMonth GROUP BY userName, role, serviceprovider, identityProvider, region, year, isFederated;

        INCREMENTAL_TABLE_COMMIT isRoleAuthenticationAnalyticsPerMonth;

        INSERT INTO TABLE isIdentityProviderAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, identityProvider,authSuccessCount,authFailureCount,cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime, isFederated,getMinuteStartingTime(year, month, day, hour, minute) as _timestamp FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount, (CASE WHEN successTbl.isFederated is NULL then failureTbl.isFederated ELSE successTbl.isFederated END) as isFederated   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.identityProvider as identityProvider,count(distinct authSuccesses.eventId) as authSuccessCount, authSuccesses.isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,identityProvider,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.identityProvider,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute, authSuccesses.isFederated) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.identityProvider as  identityProvider,count(distinct authFailures.eventId) as authFailureCount, authFailures.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,identityProvider,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authStepSuccess = false) authFailures GROUP BY authFailures.identityProvider,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute, authFailures.isFederated) failureTbl ON successTbl.identityProvider = failureTbl.identityProvider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute AND successTbl.isFederated = failureTbl.isFederated) result;

        INSERT INTO TABLE isIdentityProviderAuthenticationAnalyticsPerHour SELECT year, month, day, hour, identityProvider,SUM(authSuccessCount),SUM(authFailureCount), cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime, isFederated,getHourStartingTime(year, month, day, hour) as _timestamp  FROM isIdentityProviderAuthenticationAnalyticsPerMinute GROUP BY identityProvider, year, month, day, hour, isFederated;

        INCREMENTAL_TABLE_COMMIT isIdentityProviderAuthenticationAnalyticsPerMinute;

        INSERT INTO TABLE isIdentityProviderAuthenticationAnalyticsPerDay SELECT year, month, day,identityProvider,SUM(authSuccessCount),SUM(authFailureCount), cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime, isFederated,getDateStartingTime(year, month, day) as _timestamp FROM isIdentityProviderAuthenticationAnalyticsPerHour GROUP BY identityProvider, year, month, day, isFederated;

        INCREMENTAL_TABLE_COMMIT isIdentityProviderAuthenticationAnalyticsPerHour;

        INSERT INTO TABLE isIdentityProviderAuthenticationAnalyticsPerMonth SELECT year, month,identityProvider,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, month) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, month) as _timestamp FROM isIdentityProviderAuthenticationAnalyticsPerDay GROUP BY identityProvider, year, month, isFederated;

        INCREMENTAL_TABLE_COMMIT isIdentityProviderAuthenticationAnalyticsPerDay;

        INSERT INTO TABLE isIdentityProviderAuthenticationAnalyticsPerYear SELECT year, identityProvider,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, 1) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, 1) as _timestamp FROM isIdentityProviderAuthenticationAnalyticsPerMonth GROUP BY identityProvider, year, isFederated;

        INCREMENTAL_TABLE_COMMIT isIdentityProviderAuthenticationAnalyticsPerMonth;

        INSERT INTO TABLE isServiceProviderAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, serviceprovider,authSuccessCount,authFailureCount, cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime, false as isFirstLoginCount, isFederated,getMinuteStartingTime(year, month, day, hour, minute) as _timestamp FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount, (CASE WHEN successTbl.isFederated is NULL then failureTbl.isFederated ELSE successTbl.isFederated END) as isFederated   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.serviceprovider as serviceprovider,count(distinct authSuccesses.eventId) as authSuccessCount, authSuccesses.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,serviceprovider,authenticationSuccess,isFederated FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.serviceprovider,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute, authSuccesses.isFederated) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.serviceprovider as  serviceprovider,count(distinct authFailures.eventId) as authFailureCount, authFailures.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,serviceprovider,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authStepSuccess = false) authFailures GROUP BY authFailures.serviceprovider,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute, authFailures.isFederated) failureTbl ON successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute AND successTbl.isFederated = failureTbl.isFederated) result;

        INSERT INTO TABLE isServiceProviderAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, serviceprovider, authSuccessCount, authFailureCount, cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime, true as isFirstLoginCount, isFederated, getMinuteStartingTime(year, month, day, hour, minute) as _timestamp FROM (
        SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.serviceprovider as serviceprovider,count(distinct authSuccesses.eventId) as authSuccessCount, 0 as authFailureCount, authSuccesses.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,serviceprovider,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authenticationSuccess = true AND isFirstLogin = true) authSuccesses GROUP BY authSuccesses.serviceprovider,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute, authSuccesses.isFederated) firstLoginCountTable;

        INSERT INTO TABLE isServiceProviderAuthenticationAnalyticsPerHour SELECT year, month, day, hour, serviceprovider,SUM(authSuccessCount),SUM(authFailureCount), cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime, isFirstLoginCount, isFederated,getHourStartingTime(year, month, day, hour) as _timestamp FROM isServiceProviderAuthenticationAnalyticsPerMinute GROUP BY serviceprovider, year, month, day, hour, isFirstLoginCount, isFederated;

        INCREMENTAL_TABLE_COMMIT isServiceProviderAuthenticationAnalyticsPerMinute;

        INSERT INTO TABLE isServiceProviderAuthenticationAnalyticsPerDay SELECT year, month, day,serviceprovider,SUM(authSuccessCount),SUM(authFailureCount), cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime, isFirstLoginCount, isFederated,getDateStartingTime(year, month, day) as _timestamp FROM isServiceProviderAuthenticationAnalyticsPerHour GROUP BY serviceprovider, year, month, day, isFirstLoginCount, isFederated;

        INCREMENTAL_TABLE_COMMIT isServiceProviderAuthenticationAnalyticsPerHour;

        INSERT INTO TABLE isServiceProviderAuthenticationAnalyticsPerMonth SELECT year, month, serviceprovider, SUM(authSuccessCount), SUM(authFailureCount), cast(getMonthStartingTime(year, month) as STRING) as facetStartTime, isFirstLoginCount, isFederated, getMonthStartingTime(year, month) as _timestamp FROM isServiceProviderAuthenticationAnalyticsPerDay GROUP BY serviceprovider, year, month, isFirstLoginCount, isFederated;

        INCREMENTAL_TABLE_COMMIT isServiceProviderAuthenticationAnalyticsPerDay;

        INSERT INTO TABLE isServiceProviderAuthenticationAnalyticsPerYear SELECT year, serviceprovider, SUM(authSuccessCount), SUM(authFailureCount), cast(getMonthStartingTime(year, 1) as STRING) as facetStartTime, isFirstLoginCount, isFederated, getMonthStartingTime(year, 1) as _timestamp FROM isServiceProviderAuthenticationAnalyticsPerMonth GROUP BY serviceprovider, year, isFirstLoginCount, isFederated;

        INCREMENTAL_TABLE_COMMIT isServiceProviderAuthenticationAnalyticsPerMonth;

        INSERT INTO TABLE isUserAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, userName,authSuccessCount,authFailureCount, cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime, isFederated,getMinuteStartingTime(year, month, day, hour, minute) as _timestamp FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount, (CASE WHEN successTbl.isFederated is NULL then failureTbl.isFederated ELSE successTbl.isFederated END) as isFederated   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.userName as userName,count(distinct authSuccesses.eventId) as authSuccessCount, authSuccesses.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,userName,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute, authSuccesses.isFederated) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.userName as  userName,count(distinct authFailures.eventId) as authFailureCount, authFailures.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,userName,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authStepSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute, authFailures.isFederated) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute AND successTbl.isFederated = failureTbl.isFederated) result;

        INSERT INTO TABLE isUserAuthenticationAnalyticsPerHour SELECT year, month, day, hour, userName,SUM(authSuccessCount),SUM(authFailureCount), cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime, isFederated,getHourStartingTime(year, month, day, hour) as _timestamp  FROM isUserAuthenticationAnalyticsPerMinute GROUP BY userName, year, month, day, hour, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserAuthenticationAnalyticsPerMinute;

        INSERT INTO TABLE isUserAuthenticationAnalyticsPerDay SELECT year, month, day,userName,SUM(authSuccessCount),SUM(authFailureCount), cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime, isFederated,getDateStartingTime(year, month, day) as _timestamp FROM isUserAuthenticationAnalyticsPerHour GROUP BY userName, year, month, day, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserAuthenticationAnalyticsPerHour;

        INSERT INTO TABLE isUserAuthenticationAnalyticsPerMonth SELECT year, month,userName,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, month) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, month) as _timestamp FROM isUserAuthenticationAnalyticsPerDay GROUP BY userName, year, month, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserAuthenticationAnalyticsPerDay;

        INSERT INTO TABLE isUserAuthenticationAnalyticsPerYear SELECT year, userName,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, 1) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, 1) as _timestamp FROM isUserAuthenticationAnalyticsPerMonth GROUP BY userName, year, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserAuthenticationAnalyticsPerMonth;

        INSERT INTO TABLE isAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, userName,rolesCommaSeperated,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount, cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime, isFederated,getMinuteStartingTime(year, month, day, hour, minute) as _timestamp FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.rolesCommaSeperated is NULL then failureTbl.rolesCommaSeperated ELSE successTbl.rolesCommaSeperated END) as rolesCommaSeperated,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount, (CASE WHEN successTbl.isFederated is NULL then failureTbl.isFederated ELSE successTbl.isFederated END) as isFederated   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.userName as userName,authSuccesses.rolesCommaSeperated as rolesCommaSeperated,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.region as region,count(distinct authSuccesses.eventId) as authSuccessCount, authSuccesses.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.rolesCommaSeperated,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.region,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute, authSuccesses.isFederated) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.userName as  userName,authFailures.rolesCommaSeperated as rolesCommaSeperated,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.region as  region,count(distinct authFailures.eventId) as authFailureCount, authFailures.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authStepSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.rolesCommaSeperated,authFailures.serviceprovider,authFailures.identityProvider,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute, authFailures.isFederated) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.rolesCommaSeperated = failureTbl.rolesCommaSeperated AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute AND successTbl.isFederated = failureTbl.isFederated) result;

        INSERT INTO TABLE isAuthenticationAnalyticsPerHour SELECT year, month, day, hour, userName,rolesCommaSeperated,serviceprovider,identityProvider,region,SUM(authSuccessCount),SUM(authFailureCount), cast(getHourStartingTime(year, month, day,hour) as STRING) as facetStartTime, isFederated,getHourStartingTime(year, month, day,hour) as _timestamp  FROM isAuthenticationAnalyticsPerMinute GROUP BY userName, rolesCommaSeperated, serviceprovider, identityProvider, region, year, month, day, hour, isFederated;

        INCREMENTAL_TABLE_COMMIT isAuthenticationAnalyticsPerMinute;

        INSERT INTO TABLE isAuthenticationAnalyticsPerDay SELECT year, month,day,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,SUM(authSuccessCount),SUM(authFailureCount), cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime, isFederated,getDateStartingTime(year, month, day) as _timestamp FROM isAuthenticationAnalyticsPerHour GROUP BY userName, rolesCommaSeperated, serviceprovider, identityProvider, region, year, month, day, isFederated;

        INCREMENTAL_TABLE_COMMIT isAuthenticationAnalyticsPerHour;

        INSERT INTO TABLE isAuthenticationAnalyticsPerMonth SELECT year, month,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, month) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, month) as _timestamp FROM isAuthenticationAnalyticsPerDay GROUP BY userName, rolesCommaSeperated, serviceprovider, identityProvider, region, year, month, isFederated;

        INCREMENTAL_TABLE_COMMIT isAuthenticationAnalyticsPerDay;

        INSERT INTO TABLE isAuthenticationAnalyticsPerYear SELECT year,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, 1) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, 1) as _timestamp FROM isAuthenticationAnalyticsPerMonth GROUP BY userName, rolesCommaSeperated, serviceprovider, identityProvider, region, year, isFederated;

        INCREMENTAL_TABLE_COMMIT isAuthenticationAnalyticsPerMonth;

        INSERT INTO TABLE isUniqueAuthenticationAnalytics SELECT DISTINCT userName,serviceprovider,identityProvider,rolesCommaSeperated,authenticationSuccess,remoteIp,userStoreDomain,tetantDomain as tenantDomain, cast(_timestamp as BIGINT) as timestampValue, isFederated FROM rawAnalyticsData;

        INSERT INTO TABLE isUserstoreAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, userStoreDomain,authSuccessCount,authFailureCount,cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime, isFederated,getMinuteStartingTime(year, month, day, hour, minute) as _timestamp FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.userStoreDomain is NULL then "userStoreDomain1" ELSE successTbl.userStoreDomain END) as userStoreDomain,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount, (CASE WHEN successTbl.isFederated is NULL then failureTbl.isFederated ELSE successTbl.isFederated END) as isFederated   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.userStoreDomain as userStoreDomain,count(distinct authSuccesses.eventId) as authSuccessCount, authSuccesses.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,userStoreDomain,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userStoreDomain,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute, authSuccesses.isFederated) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.userStoreDomain as  userStoreDomain,count(distinct authFailures.eventId) as authFailureCount, authFailures.isFederated as isFederated FROM (SELECT getYear(cast(_timestamp as BIGINT)) as year, getMonth(cast(_timestamp as BIGINT)) as month, getDay(cast(_timestamp as BIGINT)) as day, getHour(cast(_timestamp as BIGINT)) as hour,  getMinute(cast(_timestamp as BIGINT)) as minute,eventId,userStoreDomain,authenticationSuccess, isFederated FROM rawAnalyticsData WHERE authStepSuccess = false) authFailures GROUP BY authFailures.userStoreDomain,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute, authFailures.isFederated) failureTbl ON successTbl.userStoreDomain = failureTbl.userStoreDomain AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute AND successTbl.isFederated = failureTbl.isFederated) result;

        INSERT INTO TABLE isUserstoreAuthenticationAnalyticsPerHour SELECT year, month, day, hour, userStoreDomain,SUM(authSuccessCount),SUM(authFailureCount), cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime, isFederated,getHourStartingTime(year, month, day, hour) as _timestamp  FROM isUserstoreAuthenticationAnalyticsPerMinute GROUP BY userStoreDomain, year, month, day, hour, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserstoreAuthenticationAnalyticsPerMinute;

        INSERT INTO TABLE isUserstoreAuthenticationAnalyticsPerDay SELECT year, month, day,userStoreDomain,SUM(authSuccessCount),SUM(authFailureCount), cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime, isFederated,getDateStartingTime(year, month, day) as _timestamp FROM isUserstoreAuthenticationAnalyticsPerHour GROUP BY userStoreDomain, year, month, day, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserstoreAuthenticationAnalyticsPerHour;

        INSERT INTO TABLE isUserstoreAuthenticationAnalyticsPerMonth SELECT year, month,userStoreDomain,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, month) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, month) as _timestamp FROM isUserstoreAuthenticationAnalyticsPerDay GROUP BY userStoreDomain, year, month, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserstoreAuthenticationAnalyticsPerDay;

        INSERT INTO TABLE isUserstoreAuthenticationAnalyticsPerYear SELECT year, userStoreDomain,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, 1) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, 1) as _timestamp FROM isUserstoreAuthenticationAnalyticsPerMonth GROUP BY userStoreDomain, year, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserstoreAuthenticationAnalyticsPerMonth;

        INSERT INTO TABLE isUserRegionStatPerHour SELECT year, month, day, hour, region,SUM(authSuccessCount),SUM(authFailureCount), cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime, isFederated,getHourStartingTime(year, month, day, hour) as _timestamp  FROM isUserRegionStatPerMinute GROUP BY region, year, month, day, hour, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserRegionStatPerMinute;

        INSERT INTO TABLE isUserRegionStatPerDay SELECT year, month, day,region,SUM(authSuccessCount),SUM(authFailureCount), cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime, isFederated,getDateStartingTime(year, month, day) as _timestamp FROM isUserRegionStatPerHour GROUP BY region, year, month, day, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserRegionStatPerHour;

        INSERT INTO TABLE isUserRegionStatPerMonth SELECT year, month,region,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, month) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, month) as _timestamp FROM isUserRegionStatPerDay GROUP BY region, year, month, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserRegionStatPerDay;

        INSERT INTO TABLE isUserRegionStatPerYear SELECT year, region,SUM(authSuccessCount),SUM(authFailureCount), cast(getMonthStartingTime(year, 1) as STRING) as facetStartTime, isFederated,getMonthStartingTime(year, 1) as _timestamp FROM isUserRegionStatPerMonth GROUP BY region, year, isFederated;

        INCREMENTAL_TABLE_COMMIT isUserRegionStatPerMonth;

    </Script>
    <CronExpression>0 0/5 * * * ?</CronExpression>
</Analytics>
