<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>is_stat_analytics</Name>
    <Script>
        CREATE TEMPORARY TABLE rawAnalyticsData USING CarbonAnalytics OPTIONS (tableName "AUTHENTICATIONANALYTICSSTREAM", schema "eventId STRING,timestamp LONG, authenticationSuccess BOOLEAN,userName STRING,userStoreDomain STRING,tetantDomain STRING,remoteIp STRING,region STRING,inboundAuthType STRING,serviceprovider STRING,remembermeEnabled BOOLEAN,forceAuthEnabled BOOLEAN,passiveAuthEnabled BOOLEAN,rolesCommaSeperated STRING,role STRING,authenticationStep STRING,identityProvider STRING,authStepSuccess BOOLEAN,stepAuthenticator STRING, userstore STRING");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerMinute USING CarbonAnalytics OPTIONS (tableName "Is-User-Authentication-Stat-per-Minute",schema "year INT -i, month INT -i, day INT -i, hour INT -I, minute INT -i, userName FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, hour, minute, userName");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerHour USING CarbonAnalytics OPTIONS (tableName "Is-User-Authentication-Stat-per-Hour",schema "year INT -i, month INT -i, day INT -i, hour INT -I, userName FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, hour, userName");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerDay USING CarbonAnalytics OPTIONS (tableName "Is-User-Authentication-Stat-per-Day",schema "year INT -i, month INT -i, day INT -i, userName FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, userName");

        CREATE TEMPORARY TABLE isUserAuthenticationAnalyticsPerMonth USING CarbonAnalytics OPTIONS (tableName "Is-User-Authentication-Stat-per-Month", schema "year INT -i, month INT -i, userName FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i", primaryKeys "year, month, userName");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerDay USING CarbonAnalytics OPTIONS (tableName "Is-Role-Authentication-Stat-per-Day", schema "year INT -i, month INT -i,day INT -i, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i,facetStartTime FACET -i, userstore FACET -i", primaryKeys "year, month, day, userName,role,serviceprovider,identityProvider,region,userstore");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerMonth USING CarbonAnalytics OPTIONS (tableName "Is-Role-Authentication-Stat-per-Month", schema "year INT -i, month INT -i, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i,facetStartTime FACET -i,userstore FACET -i", primaryKeys "year, month, userName,role,serviceprovider,identityProvider,region,userstore");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerMinute USING CarbonAnalytics OPTIONS (tableName "Is-Role-Authentication-Stat-per-Minute", schema "year INT -i, month INT -i, day INT -i, hour INT -I, minute INT -i, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i,facetStartTime FACET -i,userstore FACET -i", primaryKeys "year, month, day, hour, minute, userName,role,serviceprovider,identityProvider,region,userstore");

        CREATE TEMPORARY TABLE isRoleAuthenticationAnalyticsPerHour USING CarbonAnalytics OPTIONS (tableName "Is-Role-Authentication-Stat-per-Hour", schema "year INT -i, month INT -i, day INT -i, hour INT -I, userName FACET -i,role FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i,facetStartTime FACET -i,userstore FACET -i", primaryKeys "year, month, day, hour, userName,role,serviceprovider,identityProvider,region,userstore");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerDay USING CarbonAnalytics OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Day", schema "year INT -i, month INT -i, day INT -i, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i", primaryKeys "year, month, day, serviceprovider");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerMonth USING CarbonAnalytics OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Month", schema "year INT -i, month INT -i, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i", primaryKeys "year, month, serviceprovider");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerMinute USING CarbonAnalytics OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Minute", schema "year INT -i, month INT -i, day INT -i, hour INT -I, minute INT -i, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, hour, minute, serviceprovider");

        CREATE TEMPORARY TABLE isServiceProviderAuthenticationAnalyticsPerHour USING CarbonAnalytics OPTIONS (tableName "Is-Service-Provider-Authentication-Stat-per-Hour", schema "year INT -i, month INT -i, day INT -i, hour INT -I, serviceprovider FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, hour, serviceprovider");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerDay USING CarbonAnalytics OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Day", schema "year INT -i, month INT -i, day INT -i, identityProvider FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i", primaryKeys "year, month, day, identityProvider");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerMonth USING CarbonAnalytics OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Month", schema "year INT -i, month INT -i, identityProvider FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i", primaryKeys "year, month, identityProvider");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerMinute USING CarbonAnalytics OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Minute", schema "year INT -i, month INT -i, day INT -i, hour INT -I, minute INT -i, identityProvider FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i", primaryKeys "year, month, day, hour, minute, identityProvider");

        CREATE TEMPORARY TABLE isIdentityProviderAuthenticationAnalyticsPerHour USING CarbonAnalytics OPTIONS (tableName "Is-Identity-Provider-Authentication-Stat-per-Hour", schema "year INT -i, month INT -i, day INT -i, hour INT -I, identityProvider FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, hour, identityProvider");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerDay USING CarbonAnalytics OPTIONS (tableName "Is-Authentication-Stat-per-Day",schema "year INT -i, month INT -i,day INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i,facetStartTime FACET -i,userstore FACET -i",primaryKeys "year, month, day, userName,rolesCommaSeperated,serviceprovider,identityProvider,region,userstore");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerMonth USING CarbonAnalytics OPTIONS (tableName "Is-Authentication-Stat-per-Month",schema "year INT -i, month INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i,facetStartTime FACET -i,userstore FACET -i",primaryKeys "year, month, userName,rolesCommaSeperated,serviceprovider,identityProvider,region,userstore");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerMinute USING CarbonAnalytics OPTIONS (tableName "Is-Authentication-Stat-per-Minute",schema "year INT -i, month INT -i,day INT -i,hour INT -i, minute INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i,facetStartTime FACET -i,userstore FACET -i",primaryKeys "year, month, day, hour, minute, userName,rolesCommaSeperated,serviceprovider,identityProvider,region,userstore");

        CREATE TEMPORARY TABLE isAuthenticationAnalyticsPerHour USING CarbonAnalytics OPTIONS (tableName "Is-Authentication-Stat-per-Hour",schema "year INT -i, month INT -i,day INT -i,hour INT -i, userName FACET -i,rolesCommaSeperated FACET -i,serviceprovider FACET -i,identityProvider FACET -i,region FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i,facetStartTime FACET -i,userstore FACET -i",primaryKeys "year, month, day, hour, userName,rolesCommaSeperated,serviceprovider,identityProvider,region,userstore");

        CREATE TEMPORARY TABLE isUniqueAuthenticationAnalytics USING CarbonAnalytics OPTIONS (tableName "Is-Unique-Authentication-Stats", schema "userName STRING -i,serviceprovider STRING -i,identityProvider STRING -i,rolesCommaSeperated STRING -i, authenticationSuccess STRING -i,remoteIp STRING -i,userStoreDomain STRING -i,tenantDomain STRING -i,timestamp LONG -i,userstore STRING -i",primaryKeys "userName, serviceprovider,identityProvider,rolesCommaSeperated,authenticationSuccess,remoteIp,userStoreDomain,tenantDomain,timestamp,userstore", mergeSchema "false");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerDay USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Day",schema "year INT -i, month INT -i, day INT -i, userstore FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, userstore");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerMonth USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Month",schema "year INT -i, month INT -i, userstore FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, userstore");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerMinute USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Minute",schema "year INT -i, month INT -i, day INT -i, hour INT -I, minute INT -i, userstore FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, hour, minute, userstore");

        CREATE TEMPORARY TABLE isUserstoreAuthenticationAnalyticsPerHour USING CarbonAnalytics OPTIONS (tableName "Is-Userstore-Authentication-Stat-per-Hour",schema "year INT -i, month INT -i, day INT -i, hour INT -I, userstore FACET -i, authSuccessCount LONG -sp,authFailiureCount LONG -sp, startingTime LONG -i, facetStartTime FACET -i",primaryKeys "year, month, day, hour, userstore");


        INSERT OVERWRITE TABLE isRoleAuthenticationAnalyticsPerMonth SELECT year, month,userName,role,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount,getMonthStartingTime(year, month) as startingTime,cast(getMonthStartingTime(year, month) as STRING) as facetStartTime,userstore FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.role is NULL then failureTbl.role ELSE successTbl.role END) as role,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.userName as userName,authSuccesses.role as role,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.userstore as userstore,authSuccesses.region as region,count(authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,userName,role,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.role,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.userstore,authSuccesses.region,authSuccesses.year,authSuccesses.month) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.userName as userName,authFailures.role as role,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.userstore as  userstore,authFailures.region as  region,count(authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,userName,role,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.role,authFailures.serviceprovider,authFailures.identityProvider,authFailures.userstore,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.role = failureTbl.role AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.userstore = failureTbl.userstore AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month) result;

        INSERT OVERWRITE TABLE isRoleAuthenticationAnalyticsPerDay SELECT year, month,day,userName,role,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount,getDateStartingTime(year, month, day) as startingTime,cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime,userstore FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.role is NULL then failureTbl.role ELSE successTbl.role END) as role,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.userName as userName,authSuccesses.role as role,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.userstore as userstore,authSuccesses.region as region,count(authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,getDay(cast(timestamp as BIGINT)) as day,eventId,userName,role,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.role,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.userstore,authSuccesses.region,authSuccesses.year,authSuccesses.month,authSuccesses.day) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.userName as userName,authFailures.role as role,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.userstore as  userstore,authFailures.region as  region,count(authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,getDay(cast(timestamp as BIGINT)) as day,eventId,userName,role,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.role,authFailures.serviceprovider,authFailures.identityProvider,authFailures.userstore,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.role = failureTbl.role AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.userstore = failureTbl.userstore AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day) result;

        INSERT OVERWRITE TABLE isRoleAuthenticationAnalyticsPerHour SELECT year, month,day,hour,userName,role,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount,getHourStartingTime(year, month, day, hour) as startingTime,cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime,userstore FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.role is NULL then failureTbl.role ELSE successTbl.role END) as role,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.userName as userName,authSuccesses.role as role,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.userstore as userstore,authSuccesses.region as region,count(authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,getDay(cast(timestamp as BIGINT)) as day,getHour(cast(timestamp as BIGINT)) as hour,eventId,userName,role,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.role,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.userstore,authSuccesses.region,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.userName as userName,authFailures.role as role,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.userstore as  userstore,authFailures.region as  region,count(authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,getDay(cast(timestamp as BIGINT)) as day,getHour(cast(timestamp as BIGINT)) as hour,eventId,userName,role,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.role,authFailures.serviceprovider,authFailures.identityProvider,authFailures.userstore,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.role = failureTbl.role AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.userstore = failureTbl.userstore AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour) result;

        INSERT OVERWRITE TABLE isRoleAuthenticationAnalyticsPerMinute SELECT year, month,day,hour,minute,userName,role,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount,getMinuteStartingTime(year, month, day, hour,minute) as startingTime,cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime,userstore FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.role is NULL then failureTbl.role ELSE successTbl.role END) as role,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.userName as userName,authSuccesses.role as role,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.userstore as userstore,authSuccesses.region as region,count(authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,getDay(cast(timestamp as BIGINT)) as day,getHour(cast(timestamp as BIGINT)) as hour,getMinute(cast(timestamp as BIGINT)) as minute,eventId,userName,role,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.role,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.userstore,authSuccesses.region,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.userName as userName,authFailures.role as role,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.userstore as  userstore,authFailures.region as  region,count(authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,getDay(cast(timestamp as BIGINT)) as day,getHour(cast(timestamp as BIGINT)) as hour,getMinute(cast(timestamp as BIGINT)) as minute,eventId,userName,role,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.role,authFailures.serviceprovider,authFailures.identityProvider,authFailures.userstore,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.role = failureTbl.role AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.userstore = failureTbl.userstore AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute) result;



        INSERT OVERWRITE TABLE isIdentityProviderAuthenticationAnalyticsPerDay SELECT year, month, day,identityProvider,authSuccessCount,authFailureCount,getDateStartingTime(year, month, day) as startingTime,cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.identityProvider as identityProvider,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day,eventId,identityProvider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.identityProvider,authSuccesses.year,authSuccesses.month,authSuccesses.day) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.identityProvider as  identityProvider,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day,eventId,identityProvider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.identityProvider,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day) failureTbl ON successTbl.identityProvider = failureTbl.identityProvider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day) result;

        INSERT OVERWRITE TABLE isIdentityProviderAuthenticationAnalyticsPerHour SELECT year, month, day, hour, identityProvider,authSuccessCount,authFailureCount,getHourStartingTime(year, month, day, hour) as startingTime,cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime  FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.identityProvider as identityProvider,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,identityProvider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.identityProvider,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.identityProvider as  identityProvider,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,identityProvider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.identityProvider,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour) failureTbl ON successTbl.identityProvider = failureTbl.identityProvider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour) result;

        INSERT OVERWRITE TABLE isIdentityProviderAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, identityProvider,authSuccessCount,authFailureCount,getMinuteStartingTime(year, month, day, hour, minute) as startingTime,cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.identityProvider as identityProvider,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,identityProvider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.identityProvider,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.identityProvider as  identityProvider,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,identityProvider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.identityProvider,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute) failureTbl ON successTbl.identityProvider = failureTbl.identityProvider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute) result;

        INSERT OVERWRITE TABLE isIdentityProviderAuthenticationAnalyticsPerMonth SELECT year, month,identityProvider,authSuccessCount,authFailureCount,getMonthStartingTime(year, month) as startingTime,cast(getMonthStartingTime(year, month) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.identityProvider as identityProvider,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,identityProvider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.identityProvider,authSuccesses.year,authSuccesses.month) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.identityProvider as  identityProvider,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,identityProvider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.identityProvider,authFailures.authenticationSuccess,authFailures.year,authFailures.month) failureTbl ON successTbl.identityProvider = failureTbl.identityProvider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month) result;



        INSERT OVERWRITE TABLE isServiceProviderAuthenticationAnalyticsPerDay SELECT year, month, day,serviceprovider,authSuccessCount,authFailureCount,getDateStartingTime(year, month, day) as startingTime,cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.serviceprovider as serviceprovider,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day,eventId,serviceprovider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.serviceprovider,authSuccesses.year,authSuccesses.month,authSuccesses.day) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.serviceprovider as  serviceprovider,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day,eventId,serviceprovider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.serviceprovider,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day) failureTbl ON successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day) result;

        INSERT OVERWRITE TABLE isServiceProviderAuthenticationAnalyticsPerHour SELECT year, month, day, hour, serviceprovider,authSuccessCount,authFailureCount,getHourStartingTime(year, month, day, hour) as startingTime,cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime  FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.serviceprovider as serviceprovider,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,serviceprovider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.serviceprovider,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.serviceprovider as  serviceprovider,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,serviceprovider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.serviceprovider,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour) failureTbl ON successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour) result;

        INSERT OVERWRITE TABLE isServiceProviderAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, serviceprovider,authSuccessCount,authFailureCount,getMinuteStartingTime(year, month, day, hour, minute) as startingTime,cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.serviceprovider as serviceprovider,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,serviceprovider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.serviceprovider,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.serviceprovider as  serviceprovider,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,serviceprovider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.serviceprovider,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute) failureTbl ON successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute) result;

        INSERT OVERWRITE TABLE isServiceProviderAuthenticationAnalyticsPerMonth SELECT year, month,serviceprovider,authSuccessCount,authFailureCount,getMonthStartingTime(year, month) as startingTime,cast(getMonthStartingTime(year, month) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.serviceprovider as serviceprovider,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,serviceprovider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.serviceprovider,authSuccesses.year,authSuccesses.month) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.serviceprovider as  serviceprovider,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,serviceprovider,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.serviceprovider,authFailures.authenticationSuccess,authFailures.year,authFailures.month) failureTbl ON successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month) result;



        INSERT OVERWRITE TABLE isUserAuthenticationAnalyticsPerDay SELECT year, month, day,userName,authSuccessCount,authFailureCount,getDateStartingTime(year, month, day) as startingTime,cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.userName as userName,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day,eventId,userName,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.year,authSuccesses.month,authSuccesses.day) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.userName as  userName,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day,eventId,userName,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day) result;

        INSERT OVERWRITE TABLE isUserAuthenticationAnalyticsPerHour SELECT year, month, day, hour, userName,authSuccessCount,authFailureCount,getHourStartingTime(year, month, day, hour) as startingTime,cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime  FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.userName as userName,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,userName,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.userName as  userName,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,userName,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour) result;

        INSERT OVERWRITE TABLE isUserAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, userName,authSuccessCount,authFailureCount,getMinuteStartingTime(year, month, day, hour, minute) as startingTime,cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.userName as userName,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,userName,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.userName as  userName,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,userName,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute) result;

        INSERT OVERWRITE TABLE isUserAuthenticationAnalyticsPerMonth SELECT year, month,userName,authSuccessCount,authFailureCount,getMonthStartingTime(year, month) as startingTime,cast(getMonthStartingTime(year, month) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.userName as userName,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,userName,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.year,authSuccesses.month) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.userName as  userName,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,userName,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.authenticationSuccess,authFailures.year,authFailures.month) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month) result;



        INSERT OVERWRITE TABLE isAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, userName,rolesCommaSeperated,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount,getMinuteStartingTime(year, month, day, hour, minute) as startingTime,cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime,userstore FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.rolesCommaSeperated is NULL then failureTbl.rolesCommaSeperated ELSE successTbl.rolesCommaSeperated END) as rolesCommaSeperated,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.userName as userName,authSuccesses.rolesCommaSeperated as rolesCommaSeperated,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.userstore as userstore,authSuccesses.region as region,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.rolesCommaSeperated,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.userstore,authSuccesses.region,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.userName as  userName,authFailures.rolesCommaSeperated as rolesCommaSeperated,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.userstore as  userstore,authFailures.region as  region,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.rolesCommaSeperated,authFailures.serviceprovider,authFailures.identityProvider,authFailures.userstore,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.rolesCommaSeperated = failureTbl.rolesCommaSeperated AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.userstore = failureTbl.userstore AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute) result;

        INSERT OVERWRITE TABLE isAuthenticationAnalyticsPerMonth SELECT year, month,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount,getMonthStartingTime(year, month) as startingTime,cast(getMonthStartingTime(year, month) as STRING) as facetStartTime, userstore FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.rolesCommaSeperated is NULL then failureTbl.rolesCommaSeperated ELSE successTbl.rolesCommaSeperated END) as rolesCommaSeperated,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.userName as userName,authSuccesses.rolesCommaSeperated as rolesCommaSeperated,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.userstore as userstore,authSuccesses.region as region,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.rolesCommaSeperated,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.userstore,authSuccesses.region,authSuccesses.year,authSuccesses.month) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.userName as userName,authFailures.rolesCommaSeperated as rolesCommaSeperated,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.userstore as  userstore,authFailures.region as  region,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.rolesCommaSeperated,authFailures.serviceprovider,authFailures.identityProvider,authFailures.userstore,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.rolesCommaSeperated = failureTbl.rolesCommaSeperated AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.userstore = failureTbl.userstore AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month) result;

        INSERT OVERWRITE TABLE isAuthenticationAnalyticsPerDay SELECT year, month,day,userName,rolesCommaSeperated,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount,getDateStartingTime(year, month, day) as startingTime,cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime,userstore FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.rolesCommaSeperated is NULL then failureTbl.rolesCommaSeperated ELSE successTbl.rolesCommaSeperated END) as rolesCommaSeperated,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.userName as userName,authSuccesses.rolesCommaSeperated as rolesCommaSeperated,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.userstore as userstore,authSuccesses.region as region,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,getDay(cast(timestamp as BIGINT)) as day,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.rolesCommaSeperated,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.userstore,authSuccesses.region,authSuccesses.year,authSuccesses.month,authSuccesses.day) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.userName as userName,authFailures.rolesCommaSeperated as rolesCommaSeperated,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.userstore as  userstore,authFailures.region as  region,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,getDay(cast(timestamp as BIGINT)) as day,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.rolesCommaSeperated,authFailures.serviceprovider,authFailures.identityProvider,authFailures.userstore,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.rolesCommaSeperated = failureTbl.rolesCommaSeperated AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.userstore = failureTbl.userstore AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day) result;

        INSERT OVERWRITE TABLE isAuthenticationAnalyticsPerHour SELECT year, month, day, hour, userName,rolesCommaSeperated,serviceprovider,identityProvider,region,authSuccessCount,authFailureCount,getHourStartingTime(year, month, day,hour) as startingTime,cast(getHourStartingTime(year, month, day,hour) as STRING) as facetStartTime, userstore  FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.userName is NULL then failureTbl.userName ELSE successTbl.userName END) as userName,(CASE WHEN successTbl.rolesCommaSeperated is NULL then failureTbl.rolesCommaSeperated ELSE successTbl.rolesCommaSeperated END) as rolesCommaSeperated,(CASE WHEN successTbl.serviceprovider is NULL then failureTbl.serviceprovider ELSE successTbl.serviceprovider END) as serviceprovider,(CASE WHEN successTbl.identityProvider is NULL then failureTbl.identityProvider ELSE successTbl.identityProvider END) as identityProvider,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.region is NULL then failureTbl.region ELSE successTbl.region END) as region,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.userName as userName,authSuccesses.rolesCommaSeperated as rolesCommaSeperated,authSuccesses.serviceprovider as serviceprovider,authSuccesses.identityProvider as identityProvider,authSuccesses.userstore as userstore,authSuccesses.region as region,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userName,authSuccesses.rolesCommaSeperated,authSuccesses.serviceprovider,authSuccesses.identityProvider,authSuccesses.userstore,authSuccesses.region,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.userName as userName,authFailures.rolesCommaSeperated as rolesCommaSeperated,authFailures.serviceprovider as  serviceprovider,authFailures.identityProvider as  identityProvider,authFailures.userstore as  userstore,authFailures.region as  region,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,userName,rolesCommaSeperated,serviceprovider,identityProvider,userstore,region,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userName,authFailures.rolesCommaSeperated,authFailures.serviceprovider,authFailures.identityProvider,authFailures.userstore,authFailures.region,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour) failureTbl ON successTbl.userName = failureTbl.userName AND successTbl.rolesCommaSeperated = failureTbl.rolesCommaSeperated AND successTbl.serviceprovider = failureTbl.serviceprovider AND successTbl.identityProvider = failureTbl.identityProvider AND successTbl.userstore = failureTbl.userstore AND successTbl.region = failureTbl.region AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour) result;



        INSERT OVERWRITE TABLE isUniqueAuthenticationAnalytics SELECT DISTINCT userName,serviceprovider,identityProvider,rolesCommaSeperated,authenticationSuccess,remoteIp,userStoreDomain,tetantDomain as tenantDomain,cast(timestamp as BIGINT) as timestamp,(CASE WHEN rawAnalyticsData.userstore is NULL then "userstore1" ELSE rawAnalyticsData.userstore END) as userstore FROM rawAnalyticsData;



        INSERT OVERWRITE TABLE isUserstoreAuthenticationAnalyticsPerDay SELECT year, month, day,userstore,authSuccessCount,authFailureCount,getDateStartingTime(year, month, day) as startingTime,cast(getDateStartingTime(year, month, day) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.userstore as userstore,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day,eventId,userstore,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userstore,authSuccesses.year,authSuccesses.month,authSuccesses.day) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.userstore as  userstore,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day,eventId,userstore,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userstore,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day) failureTbl ON successTbl.userstore = failureTbl.userstore AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day) result;

        INSERT OVERWRITE TABLE isUserstoreAuthenticationAnalyticsPerHour SELECT year, month, day, hour, userstore,authSuccessCount,authFailureCount,getHourStartingTime(year, month, day, hour) as startingTime,cast(getHourStartingTime(year, month, day, hour) as STRING) as facetStartTime  FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.userstore as userstore,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,userstore,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userstore,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.userstore as  userstore,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,eventId,userstore,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userstore,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour) failureTbl ON successTbl.userstore = failureTbl.userstore AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour) result;

        INSERT OVERWRITE TABLE isUserstoreAuthenticationAnalyticsPerMinute SELECT year, month, day, hour, minute, userstore,authSuccessCount,authFailureCount,getMinuteStartingTime(year, month, day, hour, minute) as startingTime,cast(getMinuteStartingTime(year, month, day, hour,minute) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.day is NULL then failureTbl.day ELSE successTbl.day END) as day,(CASE WHEN successTbl.hour is NULL then failureTbl.hour ELSE successTbl.hour END) as hour,(CASE WHEN successTbl.minute is NULL then failureTbl.minute ELSE successTbl.minute END) as minute,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.day as day,authSuccesses.hour as hour,authSuccesses.minute as minute,authSuccesses.userstore as userstore,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,userstore,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userstore,authSuccesses.year,authSuccesses.month,authSuccesses.day,authSuccesses.hour,authSuccesses.minute) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.day as day,authFailures.hour as hour,authFailures.minute as minute,authFailures.userstore as  userstore,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month, getDay(cast(timestamp as BIGINT)) as day, getHour(cast(timestamp as BIGINT)) as hour,  getMinute(cast(timestamp as BIGINT)) as minute,eventId,userstore,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userstore,authFailures.authenticationSuccess,authFailures.year,authFailures.month,authFailures.day,authFailures.hour,authFailures.minute) failureTbl ON successTbl.userstore = failureTbl.userstore AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month AND successTbl.day = failureTbl.day AND successTbl.hour = failureTbl.hour AND successTbl.minute = failureTbl.minute) result;

        INSERT OVERWRITE TABLE isUserstoreAuthenticationAnalyticsPerMonth SELECT year, month,userstore,authSuccessCount,authFailureCount,getMonthStartingTime(year, month) as startingTime,cast(getMonthStartingTime(year, month) as STRING) as facetStartTime FROM (SELECT (CASE WHEN successTbl.year is NULL then failureTbl.year ELSE successTbl.year END) as year,(CASE WHEN successTbl.month is NULL then failureTbl.month ELSE successTbl.month END) as month,(CASE WHEN successTbl.userstore is NULL then "userstore1" ELSE successTbl.userstore END) as userstore,(CASE WHEN successTbl.authSuccessCount is NULL then 0 ELSE successTbl.authSuccessCount END) as authSuccessCount,(CASE WHEN failureTbl.authFailureCount is NULL then 0 ELSE failureTbl.authFailureCount END) as authFailureCount   FROM        (SELECT authSuccesses.year as year,authSuccesses.month as month,authSuccesses.userstore as userstore,count(distinct authSuccesses.eventId) as authSuccessCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,userstore,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = true) authSuccesses GROUP BY authSuccesses.userstore,authSuccesses.year,authSuccesses.month) successTbl        FULL OUTER JOIN        (SELECT authFailures.year as year,authFailures.month as month,authFailures.userstore as  userstore,count(distinct authFailures.eventId) as authFailureCount FROM (SELECT getYear(cast(timestamp as BIGINT)) as year, getMonth(cast(timestamp as BIGINT)) as month,eventId,userstore,authenticationSuccess FROM rawAnalyticsData WHERE authenticationSuccess = false) authFailures GROUP BY authFailures.userstore,authFailures.authenticationSuccess,authFailures.year,authFailures.month) failureTbl ON successTbl.userstore = failureTbl.userstore AND successTbl.year = failureTbl.year AND successTbl.month = failureTbl.month) result;
    </Script>
    <CronExpression>0 0/5 * * * ?</CronExpression>
</Analytics>
