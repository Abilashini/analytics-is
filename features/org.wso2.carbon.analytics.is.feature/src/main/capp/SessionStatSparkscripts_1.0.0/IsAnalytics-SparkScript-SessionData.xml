<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>IsAnalytics-SparkScript-SessionData</Name>
    <Script>
        CREATE TEMPORARY TABLE rawSessionData USING CarbonAnalytics OPTIONS (tableName "ORG_WSO2_IS_ANALYTICS_STREAM_OVERALLSESSION",schema "sessionId STRING, action INT, userName STRING, tenantDomain STRING, _timestamp LONG -i" );

        CREATE TEMPORARY TABLE isRawSessionAnalytics USING CarbonAnalytics OPTIONS (tableName "ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONINFO");

        CREATE TEMPORARY TABLE isSessionAnalyticsPerMinute USING CarbonAnalytics OPTIONS (tableName "org_wso2_is_analytics_stream_SessionStatPerMinute");

        CREATE TEMPORARY TABLE isSessionAnalyticsPerHour USING CarbonAnalytics OPTIONS (tableName "org_wso2_is_analytics_stream_SessionStatPerHour", schema "bucketId LONG -i, bucketStart LONG -i, bucketEnd LONG -i, year INT, month INT, day INT, hour INT, activeSessionCount INT -i, newSessionCount INT -i, terminatedSessionCount INT -i", primaryKeys "bucketId, bucketStart, bucketEnd", incrementalParams "isSessionAnalyticsPerHour, HOUR", mergeSchema "false");

        CREATE TEMPORARY TABLE isSessionAnalyticsPerDay USING CarbonAnalytics OPTIONS (tableName "org_wso2_is_analytics_stream_SessionStatPerDay", schema "bucketId LONG -i, bucketStart LONG -i, bucketEnd LONG -i, year INT, month INT, day INT, activeSessionCount INT -i, newSessionCount INT -i, terminatedSessionCount INT -i", primaryKeys "bucketId, bucketStart, bucketEnd", incrementalParams "isSessionAnalyticsPerDay, HOUR", mergeSchema "false");

        CREATE TEMPORARY TABLE isSessionAnalyticsHourlyAggregate USING CarbonAnalytics OPTIONS (tableName "org_wso2_is_analytics_stream_SessionAggregateStatPerHour", schema "bucketStart LONG -i, bucketEnd LONG -i, year INT, month INT, day INT, hour INT, userName FACET -i, longestSession LONG -i, averageSession LONG -i", primaryKeys "bucketStart, bucketEnd, userName", incrementalParams "isSessionAnalyticsHourlyAggregate, HOUR", mergeSchema "false");

        CREATE TEMPORARY TABLE isSessionAnalyticsDailyAggregate USING CarbonAnalytics OPTIONS (tableName "org_wso2_is_analytics_stream_SessionAggregateStatPerDay", schema "bucketStart LONG -i, bucketEnd LONG -i, year INT, month INT, day INT, userName FACET -i, longestSession LONG -i, averageSession LONG -i", primaryKeys "bucketStart, bucketEnd, userName", incrementalParams "isSessionAnalyticsDailyAggregate, HOUR", mergeSchema "false");

        CREATE TEMPORARY TABLE isSessionCountHourlyAggregate USING CarbonAnalytics OPTIONS (tableName "org_wso2_is_analytics_stream_SessionCountAggregatePerHour", schema "bucketStart LONG -i, bucketEnd LONG -i, year INT, month INT, day INT, hour INT, durationLT15mins LONG -sp, durationGT15minsLT1hr LONG -sp, durationGT1hrLT12hrs LONG -sp, durationGT12hrsLT24hrs LONG -sp, durationGT24hrs LONG -sp", primaryKeys "bucketStart, bucketEnd", incrementalParams "isSessionCountHourlyAggregate, HOUR", mergeSchema "false");

        CREATE TEMPORARY TABLE isSessionCountDailyAggregate USING CarbonAnalytics OPTIONS (tableName "org_wso2_is_analytics_stream_SessionCountAggregatePerDay", schema "bucketStart LONG -i, bucketEnd LONG -i, year INT, month INT, day INT, durationLT15mins LONG -sp, durationGT15minsLT1hr LONG -sp, durationGT1hrLT12hrs LONG -sp, durationGT12hrsLT24hrs LONG -sp, durationGT24hrs LONG -sp", primaryKeys "bucketStart, bucketEnd", incrementalParams "isSessionCountDailyAggregate, HOUR", mergeSchema "false");

        INSERT INTO TABLE isSessionAnalyticsPerHour SELECT getHourStartingTime(year, month, day,hour) as bucketId, getHourStartingTime(year, month, day,hour) as bucketStart, (getHourStartingTime(year, month, day,hour) + 3600000)  as bucketEnd, year, month, day, hour, last(activeSessionCount) as activeSessionCount, sum(newSessionCount) as newSessionCount, sum(terminatedSessionCount) as terminatedSessionCount from (select * from isSessionAnalyticsPerMinute order by bucketStart) temp group by year, month, day, hour order by bucketStart;

        INSERT INTO TABLE isSessionAnalyticsPerDay SELECT getDateStartingTime(year, month, day) as bucketId, getDateStartingTime(year, month, day) as bucketStart, (getDateStartingTime(year, month, day) + 86400000)  as bucketEnd, year, month, day, last(activeSessionCount) as activeSessionCount, sum(newSessionCount) as newSessionCount, sum(terminatedSessionCount) as terminatedSessionCount from (select * from isSessionAnalyticsPerHour order by bucketStart) temp group by year, month, day order by bucketStart;

        INSERT INTO TABLE isSessionAnalyticsHourlyAggregate SELECT getHourStartingTime(year, month, day,hour) as bucketStart, (getHourStartingTime(year, month, day,hour) + 3600000)  as bucketEnd, year, month, day, hour, userName, max(duration) as longestSession, avg(duration) as averageSession from (select * from isRawSessionAnalytics order by startTimestamp) temp group by year, month, day,hour, userName order by bucketStart;

        INSERT INTO TABLE isSessionAnalyticsDailyAggregate SELECT getDateStartingTime(year, month, day) as bucketStart, (getDateStartingTime(year, month, day) + 86400000)  as bucketEnd, year, month, day, userName, max(longestSession) as longestSession, avg(averageSession) as averageSession from (select * from isSessionAnalyticsHourlyAggregate order by bucketStart) temp group by year, month, day, userName order by bucketStart;

        INSERT INTO TABLE isSessionCountHourlyAggregate SELECT getHourStartingTime(year, month, day,hour) as bucketStart, (getHourStartingTime(year, month, day,hour) + 3600000)  as bucketEnd, year, month, day, hour, sum(CASE WHEN 90000 > duration THEN 1 ELSE 0 END) as durationLT15mins, sum(CASE WHEN duration >= 90000 AND 3600000 > duration THEN 1 ELSE 0 END) as durationGT15minsLT1hr, sum(CASE WHEN duration >= 3600000 AND 43200000 > duration THEN 1 ELSE 0 END) as durationGT1hrLT12hrs, sum(CASE WHEN duration >= 43200000 AND 86400000 > duration THEN 1 ELSE 0 END) as durationGT12hrsLT24hrs, sum(CASE WHEN duration >= 86400000 THEN 1 ELSE 0 END) as durationGT24hrs from (select * from isRawSessionAnalytics order by startTimestamp) temp group by year, month, day, hour order by bucketStart;

        INSERT INTO TABLE isSessionCountDailyAggregate SELECT getDateStartingTime(year, month, day) as bucketStart, (getDateStartingTime(year, month, day) + 86400000)  as bucketEnd, year, month, day, sum(durationLT15mins) as durationLT15mins, sum(durationGT15minsLT1hr) as durationGT15minsLT1hr, sum(durationGT1hrLT12hrs) as durationGT1hrLT12hrs, sum(durationGT12hrsLT24hrs) as durationGT12hrsLT24hrs, sum(durationGT24hrs) as durationGT24hrs from (select * from isSessionCountHourlyAggregate order by bucketStart) temp group by year, month, day order by bucketStart;
    </Script>
    <CronExpression>0 0/3 * * * ?</CronExpression>
</Analytics>
