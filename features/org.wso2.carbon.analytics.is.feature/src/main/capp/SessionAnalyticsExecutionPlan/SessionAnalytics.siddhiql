/* Enter a unique ExecutionPlan */
@Plan:name('SessionAnalyticsExecutionPlan')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */


@Import('session-analytics-stream:1.0.0')
define stream sessionStream (sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, action int, userName string, userstoreDomain string, IP string, tenantDomain string, rememberMeFlag bool, _timestamp long);

@Export('is-session-stat-per-minute:1.0.0')
define stream sessionStatPerMinute (bucketId long, bucketStart long, bucketEnd long, activeSessionCount long, newSessionCount long, terminatedSessionCount long);

@from(eventtable = 'analytics.table' , table.name = 'is-session-active-count', primary.keys = 'id', indices = 'id', wait.for.indexing = 'true', merge.schema = 'false')
define table activeSessionCountTable(id string, activeCount long);

@from(eventtable = 'analytics.table', table.name = 'ACTIVE_SESSIONS', primary.keys = 'sessionId' , indices = 'sessionId , startTimestamp, renewTimestamp, terminationTimestamp, action, userName, userstoreDomain, IP, tenantDomain, rememberMeFlag',  wait.for.indexing = 'false')
define table activeSessionsTable (sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, action int, userName string, userstoreDomain string, IP string, tenantDomain string, rememberMeFlag bool);

@Export('session-info-stream:1.0.0')
define stream sessionStreamInfo (sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, endTimestamp long, duration long, isActive bool, userName string, userstoreDomain string, IP string, tenantDomain string, rememberMeFlag bool);

from sessionStream [action == 1 OR action == 2]
select sessionId, startTimestamp, renewTimestamp, terminationTimestamp, action, userName, userstoreDomain, IP, tenantDomain, rememberMeFlag
insert into activeSessionsTable;

from sessionStream [action == 0]
select sessionId, startTimestamp, renewTimestamp, terminationTimestamp, terminationTimestamp as endTimestamp, (terminationTimestamp - startTimestamp) as duration,  false as isActive, userName, userstoreDomain, IP, tenantDomain, rememberMeFlag
insert into sessionStreamInfo;

from sessionStreamInfo
delete activeSessionsTable
on activeSessionsTable.sessionId == sessionId;

from sessionStream[action == 1 OR action == 0]#window.externalTimeBatch(_timestamp, 1 min, 0, 2 min)
select (_timestamp - _timestamp%60000) as bucketId, sum(action) as newSessionCount, sum(1 - action) as terminatedSessionCount, (2*sum(action)-count()) as net, 'count' as id
insert into bucketStream;

from bucketStream#window.length(1) as s left outer join activeSessionCountTable as t
on s.id == t.id
select s.bucketId, s.bucketId as bucketStart, (s.bucketId + 60000) as bucketEnd, (s.net  + ifThenElse(t.activeCount is null, convert(0, 'long'), t.activeCount) ) as activeSessionCount, s.newSessionCount, s.terminatedSessionCount
insert into sessionStatPerMinute;

from sessionStatPerMinute#window.length(1)
select 'count' as id, activeSessionCount as activeCount
insert into activeSessionCountTable;