/* Enter a unique ExecutionPlan */
@Plan:name('IsAnalytics-ExecutionPlan-SessionData')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */


@Import('org.wso2.is.analytics.stream.OverallSession:1.0.0')
define stream SessionStream (sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, action int, userName string, userstoreDomain string, IP string, region string, tenantDomain string, rememberMeFlag bool, userAgent string, _timestamp long);

@Export('org.wso2.is.analytics.stream.SessionStatPerMinute:1.0.0')
define stream SessionStatPerMinute (bucketId long, bucketStart long, bucketEnd long, year int, month int, day int, hour int, minute int, activeSessionCount long, newSessionCount long, terminatedSessionCount long);

@from(eventtable = 'analytics.table' , table.name = 'is-session-active-count', primary.keys = 'id', indices = 'id', wait.for.indexing = 'true', merge.schema = 'false')
define table activeSessionCountTable(id string, activeCount long);

@from(eventtable = 'analytics.table', table.name = 'ACTIVE_SESSIONS', primary.keys = 'sessionId' , indices = 'sessionId , startTimestamp, renewTimestamp, terminationTimestamp, year, month, day, hour, minute, action, userName, userstoreDomain, IP, region, tenantDomain, rememberMeFlag, userAgent',  wait.for.indexing = 'false')
define table activeSessionsTable (sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, year int, month int, day int, hour int, minute int, action int, userName string, userstoreDomain string, IP string, region string, tenantDomain string, rememberMeFlag bool, userAgent string);

@Export('org.wso2.is.analytics.stream.SessionInfo:1.0.0')
define stream SessionStreamInfo (sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, endTimestamp long, year int, month int, day int, hour int, minute int, duration long, isActive bool, userName string, userstoreDomain string, IP string, tenantDomain string, rememberMeFlag bool);

from SessionStream [action == 1 OR action == 2]
select sessionId, startTimestamp, renewTimestamp, terminationTimestamp, time:extract(startTimestamp, 'year') as year, time:extract(startTimestamp, 'month') as month, time:extract(startTimestamp, 'day') as day, time:extract(startTimestamp, 'hour') as hour, time:extract(startTimestamp, 'minute') as minute, action, userName, userstoreDomain, IP, region, tenantDomain, rememberMeFlag, userAgent
insert into activeSessionsTable;

from SessionStream [action == 0]
select sessionId, startTimestamp, renewTimestamp, terminationTimestamp, terminationTimestamp as endTimestamp, time:extract(startTimestamp, 'year') as year, time:extract(startTimestamp, 'month') as month, time:extract(startTimestamp, 'day') as day, time:extract(startTimestamp, 'hour') as hour, time:extract(startTimestamp, 'minute') as minute, (terminationTimestamp - startTimestamp) as duration,  false as isActive, userName, userstoreDomain, IP, tenantDomain, rememberMeFlag
insert into SessionStreamInfo;

from SessionStreamInfo
delete activeSessionsTable
on activeSessionsTable.sessionId == sessionId;

from SessionStream[action == 1 OR action == 0]#window.timeBatch(1 min, 0)
select isAnalytics:getMinuteStartingTime(time:timestampInMilliseconds()) as bucketId, sum(action) as newSessionCount, sum(1 - action) as terminatedSessionCount, (2*sum(action)-count()) as net, 'count' as id
insert into BucketStream;

from BucketStream#window.length(1) as s left outer join activeSessionCountTable as t
on s.id == t.id
select s.bucketId, s.bucketId as bucketStart, (s.bucketId + 60000) as bucketEnd, time:extract(bucketId, 'year') as year, time:extract(bucketId, 'month') as month, time:extract(bucketId, 'day') as day, time:extract(bucketId, 'hour') as hour, time:extract(bucketId, 'minute') as minute,  (s.net  + ifThenElse(t.activeCount is null, convert(0, 'long'), t.activeCount) ) as activeSessionCount, s.newSessionCount, s.terminatedSessionCount
insert into SessionStatPerMinute;

from SessionStatPerMinute#window.length(1)
select 'count' as id, activeSessionCount as activeCount
insert into activeSessionCountTable;