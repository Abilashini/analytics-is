<%
(function () {


    var log = new Log();
    var carbon = require('carbon');
    var configs = require('/configs/designer.json');
    var utils = require('/modules/utils.js');
    var timeRangeUtil = Packages.org.wso2.analytics.shared.util.time.TimeRangeUtils;
    var timeRange = Packages.org.wso2.analytics.shared.util.time.bean.TimeRange;
    var JSUtils = Packages.org.wso2.carbon.analytics.jsservice.Utils;
    var AnalyticsCachedJSServiceConnector = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector;
    var AnalyticsCache = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector.AnalyticsCache;

    var CONTENT_TYPE_JSON = "application/json";
    var AUTHORIZATION_HEADER = "Authorization";
    var USER_TOKEN = "user";
    var TYPE = "type";
    var USERNAME = "username";
    var TENANT_DOMAIN = "domain";
    var CONST_AT = "@";
    var HTTP_INTERNAL_ERROR = 500;
    var HTTP_USER_NOT_AUTHENTICATED = 403;

    //operation types
    var TYPE_OVERALL_AUTH_SUCCESS_AND_FAILURE = 1;
    var TYPE_PER_USER_AUTH_SUCCESS = 2;
    var TYPE_PER_USER_AUTH_FAILURE = 3;
    var TYPE_PER_SERVICE_PROVIDER_AUTH_SUCCESS = 4;
    var TYPE_PER_SERVICE_PROVIDER_AUTH_FAILURE = 5;
    var TYPE_PER_ROLE_AUTH_SUCCESS = 6;
    var TYPE_PER_ROLE_AUTH_FAILURE = 7;
    var TYPE_PER_IDENTITY_PROVIDER_AUTH_SUCCESS = 9;
    var TYPE_PER_IDENTITY_PROVIDER_AUTH_FAILURE = 10;
    var TYPE_AUTHENTICATION_DATA_TABLE = 11;
    var TYPE_USERNAME_LIST = 12;
    var TYPE_SERVICE_PROVIDER_LIST = 13;
    var TYPE_IDENTITY_PROVIDER_LIST = 14;
    var TYPE_ROLE_LIST = 15;
    var TYPE_PER_SERVICE_PROVIDER_FIRST_LOGIN_SUCCESS = 16;
    var TYPE_USERSTORE_LIST = 17;
    var TYPE_PER_USERSTORE_AUTH_SUCCESS = 18;
    var TYPE_PER_USERSTORE_AUTH_FAILURE = 19;
    var TYPE_AUTHENTICATION_DATA_TABLE_RESIDENT_IDP = 20;
    var TYPE_TOP_LONGEST_SESSIONS = 21;
    var TYPE_AVERAGE_SESSION_DURATION = 22;
    var TYPE_SESSION_COUNT_OVER_TIME = 23;
    var TYPE_SESSION_USERNAME_LIST = 24;
    var TYPE_PER_USER_REGION = 25;
    var TYPE_SESSION_CHANGE_OVER_TIME = 26;
    var TYPE_TOP_LONGEST_SESSIONS_NEW = 27;
    var TYPE_SESSION_COUNT_OVER_TIME_NEW = 28;

    if (configs.cacheTimeoutSeconds) {
        cacheTimeoutSeconds = parseInt(configs.cacheTimeoutSeconds);
    }
    var cacheSizeBytes = 1024 * 1024 * 1024; // 1GB
    if (configs.cacheSizeBytes) {
        cacheSizeBytes = parseInt(configs.cacheSizeBytes);
    }

    response.contentType = CONTENT_TYPE_JSON;

    var authParam = request.getHeader(AUTHORIZATION_HEADER);
    if (authParam != null) {
        credentials = JSUtils.authenticate(authParam);
        loggedInUser = credentials[0];
    } else {
        var token = session.get(USER_TOKEN);
        if (token != null) {
            loggedInUser = token[USERNAME] + CONST_AT + token[TENANT_DOMAIN];
        } else {
            log.error("user is not authenticated!");
            response.status = HTTP_USER_NOT_AUTHENTICATED;
            print('{ "status": "Failed", "message": "User is not authenticated." }');
            return;
        }
    }

    var cache = application.get("AnalyticsWebServiceCache");
    if (cache == null) {
        cache = new AnalyticsCache(cacheTimeoutSeconds, cacheSizeBytes);
        application.put("AnalyticsWebServiceCache", cache);
    }

    var connector = new AnalyticsCachedJSServiceConnector(cache);

    var type = 0;
    var typeParam = request.getParameter(TYPE);
    if (typeParam != null) {
        type = parseInt(typeParam);
    }

    if (type == 0) {
        log.error("operation type is not specified!");
        response.status = HTTP_INTERNAL_ERROR;
        print('{ "status": "Failed", "message": "Operation type is not specified" }');
        return;
    }

    var content = request.getContent();
    if (content != '' && content != null) {
        if (log.isDebugEnabled()) {
            log.debug("value of content: " + stringify(content));
        }
    }

    if (connector != null && loggedInUser != null) {

        var result = null;
        var query = null;
        var resp = null;

        var timeFrom = request.getParameter("timeFrom");
        var timeTo = request.getParameter("timeTo");
        var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
        var idpType = request.getParameter("idpType");
        var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

        switch (type) {
            case TYPE_OVERALL_AUTH_SUCCESS_AND_FAILURE:
            {
                result = [];

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                if (listnedAdditionalUserPrefs != "" && listnedAdditionalUserPrefs.indexOf("identityProvider") > -1) {
                    query = stringify({
                        tableName: tableName,
                        groupByField: "facetStartTime",
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        aggregateFields: [
                            {
                                fields: ["authStepSuccessCount"],
                                aggregate: "SUM",
                                alias: "total_authSuccessCount"
                            },
                            {
                                fields: ["authFailureCount"],
                                aggregate: "SUM",
                                alias: "total_authFailiureCount"
                            }
                        ]
                    });
                } else {
                    query = stringify({
                        tableName: tableName,
                        groupByField: "facetStartTime",
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        aggregateFields: [
                            {
                                fields: ["authSuccessCount"],
                                aggregate: "SUM",
                                alias: "total_authSuccessCount"
                            },
                            {
                                fields: ["authFailureCount"],
                                aggregate: "SUM",
                                alias: "total_authFailiureCount"
                            }
                        ]
                    });
                }

                resp = connector.searchWithAggregates(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                for (var i = 0; i < dataPoints.length; i++) {
                    var obj = dataPoints[i];
                    // overallAuthSuccessCount += obj.values.total_authSuccessCount;
                    //overallAuthFailureCount += obj.values.total_authFailiureCount;

                    result.push({
                        "timestamp": obj.values.facetStartTime[0],
                        "successCount": obj.values.total_authSuccessCount,
                        "faultsCount": obj.values.total_authFailiureCount
                    });
                }
                break;
            }
            case TYPE_PER_USER_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));


                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_USERAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                if (listnedAdditionalUserPrefs != "" && listnedAdditionalUserPrefs.indexOf("identityProvider") > -1) {
                    query = stringify({
                        fieldName: "userName", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authStepSuccessCount",
                        start: start,
                        count: length
                    });
                } else {
                    query = stringify({
                        fieldName: "userName", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authSuccessCount",
                        start: start,
                        count: length
                    });
                }


                resp = connector.drillDownCategories(loggedInUser, tableName, query);

                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;
                var categoryCount = dataPoints.categoryCount;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "username": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_USER_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_USERAUTHSTATPER" + timeUnit;

                var additionalParameters = "";


                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "userName", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    //search query, optional
                    scoreFunction: "authFailureCount", //score function
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;


                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "username": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_SERVICE_PROVIDER_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));


                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SPAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                if (listnedAdditionalUserPrefs != "" && listnedAdditionalUserPrefs.indexOf("identityProvider") > -1) {
                    query = stringify({
                        fieldName: "serviceProvider", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" +
                                idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authStepSuccessCount",
                        start: start,
                        count: length
                    });

                }
                else {
                    query = stringify({
                        fieldName: "serviceProvider", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" +
                                idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authSuccessCount", //score function
                        start: start,
                        count: length
                    });
                }

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;


                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "serviceProvider": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_SERVICE_PROVIDER_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SPAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "serviceProvider", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" +
                            idpTypeFilter + additionalParameters,
                    //search query, optional
                    scoreFunction: "authFailureCount", //score function
                    start: start,
                    count: length
                });


                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "serviceProvider": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_ROLE_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_ROLEAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                if (listnedAdditionalUserPrefs != "" && listnedAdditionalUserPrefs.indexOf("identityProvider") > -1) {
                    query = stringify({
                        fieldName: "role", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authStepSuccessCount",
                        start: start,
                        count: length
                    });
                } else {
                    query = stringify({
                        fieldName: "role", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authSuccessCount", //score function
                        start: start,
                        count: length
                    });
                }


                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "role": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_ROLE_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_ROLEAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "role", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    //search query, optional
                    scoreFunction: "authFailureCount", //score function
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "role": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_IDENTITY_PROVIDER_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }
                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_IDPAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                if (listnedAdditionalUserPrefs != "") {
                    query = stringify({
                        fieldName: "identityProvider", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authStepSuccessCount",
                        start: start,
                        count: length
                    });
                } else {
                    query = stringify({
                        fieldName: "identityProvider", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authSuccessCount", //score function
                        start: start,
                        count: length
                    });
                }

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "identityProvider": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_IDENTITY_PROVIDER_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_IDPAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "identityProvider", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    //search query, optional
                    scoreFunction: "authFailureCount", //score function
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "identityProvider": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_AUTHENTICATION_DATA_TABLE:
            {

                var columns = ["userName", "serviceProvider", "identityProvider", "rolesCommaSeperated"
                    , "remoteIp", "authenticationSuccess", "_timestamp"];
                var result = {};
                var data = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("length"));
                var draw = request.getParameter("draw");
                var sortByColumnNo = parseInt(request.getParameter("order[0][column]"));
                var sortType = request.getParameter("order[0][dir]").toUpperCase();
                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_OVERALLAUTHENTICATION";

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                var query = stringify({
                    "query": "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter +
                            additionalParameters,
                    "start": start,
                    "count": length,
                    "sortBy": [
                        {
                            "field": columns[sortByColumnNo],
                            "sortType": sortType
                        }
                    ]
                });

                var resp = connector.search(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                var count = connector.searchCount(loggedInUser, tableName, query);
                var limit = count.getMessage();

                for (i = 0; i < dataPoints.length; i++) {
                    var temp = [];

                    for (j = 0; j < columns.length; j++) {
                        var column = columns[j];
                        if (dataPoints[i] != null) {
                            if (column == "_timestamp") {
                                var value = dataPoints[i]["timestamp"];
                                var date = new Date(value);
                                temp.push(date.toLocaleString());
                            } else {
                                var value = dataPoints[i]["values"][column];
                                temp.push(value);
                            }
                        }
                    }
                    data.push(temp);
                }

                result["draw"] = draw;
                result["data"] = data;

                if (dataPoints.length < length) {
                    limit = start + length;
                }
                result["recordsFiltered"] = limit;
                result["recordsTotal"] = limit;
                break;
            }
            case TYPE_USERNAME_LIST:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_USERAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "userName", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    //search query, optional
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);

                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "userName": key
                        });
                    }
                }
                break;
            }
            case TYPE_ROLE_LIST:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_ROLEAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "role", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    //search query, optional
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "role": key
                        });
                    }
                }
                break;
            }
            case TYPE_IDENTITY_PROVIDER_LIST :
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_IDPAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "identityProvider", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    //search query, optional
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "identityProvider": key
                        });
                    }
                }
                break;
            }
            case TYPE_SERVICE_PROVIDER_LIST :
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SPAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "serviceProvider", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" +
                            idpTypeFilter + additionalParameters,
                    //search query, optional
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "serviceProvider": key
                        });
                    }
                }
                break;
            }
            case TYPE_USERSTORE_LIST:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_USERSTOREAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "userStoreDomain", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters, //search query, optional
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "userstore": key
                        });
                    }
                }
                break;
            }
            case TYPE_PER_USERSTORE_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_USERSTOREAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                if (listnedAdditionalUserPrefs != "" && listnedAdditionalUserPrefs.indexOf("identityProvider") > -1) {
                    query = stringify({
                        fieldName: "userStoreDomain", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authStepSuccessCount", //score function
                        start: start,
                        count: length
                    });
                } else {
                    query = stringify({
                        fieldName: "userStoreDomain", //field which is indexed as a FACET
                        categoryPath: [], //Path being drilled down, optional
                        query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                        //search query, optional
                        scoreFunction: "authSuccessCount", //score function
                        start: start,
                        count: length
                    });
                }

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "userstore": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_USERSTORE_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_USERSTOREAUTHSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_AUTHSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "userStoreDomain", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    //search query, optional
                    scoreFunction: "authFailureCount", //score function
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "userstore": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_AUTHENTICATION_DATA_TABLE_RESIDENT_IDP:
            {
                var columns = ["userName", "serviceProvider", "userStoreDomain", "rolesCommaSeperated"
                    , "remoteIp", "authenticationSuccess", "_timestamp"];
                var result = {};
                var data = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("length"));
                var draw = request.getParameter("draw");
                var sortByColumnNo = parseInt(request.getParameter("order[0][column]"));
                var sortType = request.getParameter("order[0][dir]").toUpperCase();
                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_OVERALLAUTHENTICATION";

                var additionalParameters = "";
                if (listnedAdditionalUserPrefs != "") {
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                var query = stringify({
                    "query": "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    "start": start,
                    "count": length,
                    "sortBy": [
                        {
                            "field": columns[sortByColumnNo],
                            "sortType": sortType
                        }
                    ]
                });

                var resp = connector.search(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var count = connector.searchCount(loggedInUser, tableName, query);
                var limit = count.getMessage();

                for (i = 0; i < dataPoints.length; i++) {
                    var temp = [];

                    for (j = 0; j < columns.length; j++) {
                        var column = columns[j];
                        if (dataPoints[i] != null) {
                            if (column == "_timestamp") {
                                var value = dataPoints[i]["timestamp"];
                                var date = new Date(value);
                                temp.push(date.toLocaleString());
                            } else {
                                var value = dataPoints[i]["values"][column];
                                temp.push(value);
                            }
                        }
                    }
                    data.push(temp);
                }

                result["draw"] = draw;
                result["data"] = data;

                if (dataPoints.length < length) {
                    limit = start + length;
                }
                result["recordsFiltered"] = limit;
                result["recordsTotal"] = limit;
                break;
            }
            case TYPE_PER_SERVICE_PROVIDER_FIRST_LOGIN_SUCCESS :
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SPAUTHSTATPER" + timeUnit;

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                query = stringify({
                    fieldName: "serviceProvider", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter, //search query, optional
                    scoreFunction: "authFirstSuccessCount", //score function
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "serviceProvider": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }


            case TYPE_PER_USER_REGION:
            {
                result = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_USERREGIONSTATPER" + timeUnit;

                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_USERREGIONSTATPER" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var idpTypeFilter = "";
                if (idpType != "") {
                    idpTypeFilter = idpType;
                }

                var query = stringify({
                    query: "_timestamp : [" + timeFrom + " TO " + timeTo + "]" + idpTypeFilter + additionalParameters,
                    "start": start,
                    "count": length
                });

                var resp = connector.search(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                for (var i = 0; i < dataPoints.length; i++) {
                    result.push({
                        "region": dataPoints[i].values.region,
                        "authSuccessCount": dataPoints[i].values.authSuccessCount,
                        "authFailureCount": dataPoints[i].values.authFailureCount,
                    });
                }

                break;
            }


            case TYPE_TOP_LONGEST_SESSIONS:
            {
                result = [];
                var data = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                if (timeUnit == "SECOND" || timeUnit == "MINUTE") {
                    timeUnit = "HOUR";
                } else if (timeUnit == "MONTH" || timeUnit == "YEAR") {
                    timeUnit = "DAY";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONAGGREGATESTATPER" + timeUnit;

                query = stringify({
                    query: "bucketStart : [" + timeFrom + " TO " + timeTo + "] AND bucketEnd : [" + timeFrom + " TO " + timeTo + "]",
                    start: start,
                    count: length,
                    "sortBy": [
                        {
                            "field": "longestSession",
                            "sortType": "DESC"
                        }
                    ]
                });

                resp = connector.search(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var count = connector.searchCount(loggedInUser, tableName, query).getMessage();

                for (i = 0; i < dataPoints.length; i++) {
                    var temp = [];
                    if (dataPoints[i] != null) {
                        var index = start + i + 1;
                        var username = dataPoints[i]["values"]["userName"];
                        var duration = dataPoints[i]["values"]["longestSession"];
                        data.push({
                            "username": username + " " + index,
                            "duration": duration / 1000
                        });
                    }
                }
                result.push(data);
                result.push(count);
                break;
            }
            case TYPE_TOP_LONGEST_SESSIONS_NEW:
            {
                result = [];
                var data = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONINFO";

                query = stringify({
                    fieldName: "sessionId", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "((startTimestamp : [" + timeFrom + " TO " + timeTo + "] OR startTimestamp : [" + 0 + " TO " + timeFrom + "]) AND (endTimestamp : [" + timeFrom + " TO " + timeTo + "] OR endTimestamp : [" + timeTo + " TO " + 1473641368431 + "] OR isActive:1))",
                    scoreFunction: "duration", //score function
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);

                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;
                var categoryCount = dataPoints.categoryCount;


                //TODO : Get the session ID lists and retreive records - getRecordsByIds

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "sessionId": key,
                            "duration": obj[key]
                        });
                    }
                }

                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_AVERAGE_SESSION_DURATION:
            {
                result = [];
                var data = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                if (timeUnit == "SECOND" || timeUnit == "MINUTE") {
                    timeUnit = "HOUR";
                } else if (timeUnit == "MONTH" || timeUnit == "YEAR") {
                    timeUnit = "DAY";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONAGGREGATESTATPER" + timeUnit;

                query = stringify({
                    tableName: tableName,
                    groupByField: "userName",
                    aggregateLevel: 0,
                    query: "bucketStart : [" + timeFrom + " TO " + timeTo + "] AND bucketEnd : [" + timeFrom + " TO " + timeTo + "]",
                    aggregateFields: [
                        {
                            fieldName: "averageSession",
                            aggregate: "AVG",
                            alias: "averageSession"
                        }
                    ]
                });

                resp = connector.searchWithAggregates(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var count = dataPoints.length;

                for (i = 0; i < dataPoints.length; i++) {
                    var temp = [];
                    if (dataPoints[i] != null) {
                        var username = dataPoints[i]["values"]["userName"];
                        var duration = dataPoints[i]["values"]["averageSession"];
                        data.push({
                            "username": username,
                            "duration": duration / 1000
                        });
                    }
                }

                // sort average values
                var insert = function (array, rightIndex, value) {
                    for (var j = rightIndex; j > 0 && array[j - 1]["duration"] < value["duration"]; j--) {
                        array[j] = array[j - 1];
                    }
                    array[j] = value;
                };

                for (var i = 0; i < data.length; i++) {
                    insert(data, i, data[i]);
                }

                result.push(data.slice(start, start + length));
                result.push(count);
                break;
            }
            case TYPE_SESSION_COUNT_OVER_TIME:
            {
                result = [];
                var data = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                if (timeUnit == "SECOND" || timeUnit == "MINUTE") {
                    timeUnit = "HOUR";
                } else if (timeUnit == "MONTH" || timeUnit == "YEAR") {
                    timeUnit = "DAY";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONCOUNTAGGREGATEPER" + timeUnit;

                var labels = ["< 15 mins", "< 1 hr", "< 12 hrs", "< 24 hrs", "> 24 hrs"];

                query = stringify({
                    tableName: tableName,
                    query: "bucketStart : [" + timeFrom + " TO " + timeTo + "] AND bucketEnd : [" + timeFrom + " TO " + timeTo + "]",
                    aggregateFields: [
                        {
                            fields: ["durationLT15mins"],
                            aggregate: "SUM",
                            alias: "durationLT15mins"
                        },
                        {
                            fields: ["durationGT15minsLT1hr"],
                            aggregate: "SUM",
                            alias: "durationGT15minsLT1hr"
                        },
                        {
                            fields: ["durationGT1hrLT12hrs"],
                            aggregate: "SUM",
                            alias: "durationGT1hrLT12hrs"
                        },
                        {
                            fields: ["durationGT12hrsLT24hrs"],
                            aggregate: "SUM",
                            alias: "durationGT12hrsLT24hrs"
                        },
                        {
                            fields: ["durationGT24hrs"],
                            aggregate: "SUM",
                            alias: "durationGT24hrs"
                        }
                    ],
                    noOfRecords: 100000
                });

                resp = connector.searchWithAggregates(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                dataPointsArray.push(dataPoints[0].values.durationLT15mins);
                dataPointsArray.push(dataPoints[0].values.durationGT15minsLT1hr);
                dataPointsArray.push(dataPoints[0].values.durationGT1hrLT12hrs);
                dataPointsArray.push(dataPoints[0].values.durationGT12hrsLT24hrs);
                dataPointsArray.push(dataPoints[0].values.durationGT24hrs);

                for (var i = 0; i < labels.length; i++) {
                    data.push({
                        "duration": labels[i],
                        "sessionCount": dataPointsArray[i]
                    });
                }

                result.push(data);
                result.push(labels.length);
                break;
            }
            case TYPE_SESSION_COUNT_OVER_TIME_NEW:
            {
                result = [];
                var data = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                if (timeUnit == "SECOND" || timeUnit == "MINUTE") {
                    timeUnit = "HOUR";
                } else if (timeUnit == "MONTH" || timeUnit == "YEAR") {
                    timeUnit = "DAY";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONINFO";

                var labels = ["< 15 mins", "< 1 hr", "< 12 hrs", "< 24 hrs", "> 24 hrs"];

                query = stringify({
                    tableName: tableName,
                    rangeField: "duration",
                    "ranges":[
                        {
                            "label":"< 15 mins",
                            "from":0,
                            "to":900000
                        },
                        {
                            "label":"< 1 hr",
                            "from":900001,
                            "to":3600000
                        },
                        {
                            "label":"< 12 hrs",
                            "from":3600000,
                            "to":43200000
                        },
                        {
                            "label":"< 24 hrs",
                            "from":43200001,
                            "to":86400000
                        },
                        {
                            "label":"> 24 hrs",
                            "from":86400000,
                            "to":9223372036854775807
                        }
                    ],
                    query: "((startTimestamp : [" + timeFrom + " TO " + timeTo + "] OR startTimestamp : [" + 0 + " TO " + timeFrom + "]) AND (endTimestamp : [" + timeFrom + " TO " + timeTo + "] OR endTimestamp : [" + timeTo + " TO " + 1473641368431 + "] OR isActive:1))",
                });

                resp = connector.drillDownRangeCount(loggedInUser, tableName, query);

                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;
                var categoryCount = dataPoints.categoryCount;


                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "duration": key,
                            "sessionCount": obj[key]
                        });
                    }
                }

                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_SESSION_USERNAME_LIST:
            {
                result = [];
                dataPointsArray = [];

                if (timeUnit == "SECOND" || timeUnit == "MINUTE") {
                    timeUnit = "HOUR";
                } else if (timeUnit == "MONTH" || timeUnit == "YEAR") {
                    timeUnit = "DAY";
                }

                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONAGGREGATESTATPER" + timeUnit;

                query = stringify({
                    fieldName: "userName", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "bucketStart : [" + timeFrom + " TO " + timeTo + "] AND bucketEnd : [" + timeFrom + " TO " + timeTo + "]",
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);

                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "userName": key
                        });
                    }
                }
                break;
            }
            case TYPE_SESSION_CHANGE_OVER_TIME:
            {
                result = [];
                var data = [];
                dataPointsArray = [];
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                } else if (timeUnit == "DAY" || timeUnit == "MONTH" || timeUnit == "YEAR") {
                    timeUnit = "HOUR";
                }

                // querying for session change
                var tableName = "ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONSTATPER" + timeUnit;


                query = stringify({
                    query: "bucketStart : [" + timeFrom + " TO " + timeTo + "] AND bucketEnd : [" + timeFrom + " TO " + timeTo + "]",
                    start: start,
                    count: length
                });

                var resp = connector.search(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var count = connector.searchCount(loggedInUser, tableName, query);

                // querying for active session count
                var tableNameActiveSessions = "IS-SESSION-ACTIVE-COUNT";

                queryActiveSessions = stringify({
                    query: "*:*",
                    start: start,
                    count: length
                });

                var respActiveCount = connector.search(loggedInUser, tableNameActiveSessions, queryActiveSessions);
                var dataPointsActiveCount = JSON.parse(respActiveCount.getMessage());
                var activeCount = dataPointsActiveCount[0]["values"]["activeCount"];

                for (i = 0; i < dataPoints.length; i++) {
                    var temp = [];
                    if (dataPoints[i] != null) {
                        var timestamp = dataPoints[i]["values"]["bucketId"];
                        var activeSessionCount = dataPoints[i]["values"]["activeSessionCount"];
                        var newSessionCount = dataPoints[i]["values"]["newSessionCount"];
                        var terminatedSessionCount = dataPoints[i]["values"]["terminatedSessionCount"];

                        data.push({
                            "timestamp": Number(timestamp),
                            "sessionCount": activeSessionCount,
                            "sessionType": "active"
                        });
                        data.push({
                            "timestamp": Number(timestamp),
                            "sessionCount": newSessionCount,
                            "sessionType": "new"
                        });
                        data.push({
                            "timestamp": Number(timestamp),
                            "sessionCount": terminatedSessionCount,
                            "sessionType": "terminated"
                        });
                    }
                }

                result.push(data);
                result.push({
                    "activeCount": activeCount
                });

                break;
            }
            default:
            {
                result = '{ "status": "Failed", "message": "Unidentified operation" }';
            }
        }

        if (result != null) {
            if (log.isDebugEnabled()) {
                log.debug("value of result: " + result);
            }
            var finalResult;
            if (type == TYPE_AUTHENTICATION_DATA_TABLE || type == TYPE_AUTHENTICATION_DATA_TABLE_RESIDENT_IDP) {
                finalResult = result;
            } else {
                finalResult = {
                    status: "success",
                    message: result
                }
            }
            print(finalResult);
        }
    }
    else {
        print('{ "status": "Failed", "statusCode": "500", "message": "AnalyticsCachedWebServiceConnector is unavailable" }');
    }
}());

%>
