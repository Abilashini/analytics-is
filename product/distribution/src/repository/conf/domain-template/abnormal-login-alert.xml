<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<domain name="AbnormalAuthenticationAttempts">
    <description>Abnormal Authentication Attempts</description>
    <scenarios>

        <scenario type="Region Excess Login Alert">
            <description>Send alerts when authentication requests from a particular region exceed a certain number.</description>
            <templates>
                <template type="realTime">
                    <![CDATA[
                @Plan:name('IsAnalytics-ExecutionPlan-AuthenticationData')
                @import('org.wso2.is.analytics.stream.ProcessedOverallAuthentication:1.0.0')
		        define stream OverallAuthenticationProcessedStream (meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string, _timestamp long);
                @Export('org.wso2.is.analytics.stream.RegionExcessLoginAlert:1.0.0')
                define stream RegionExcessLoginAlert (region string, requestCount long, timestamp long);
                from OverallAuthenticationProcessedStream#window.timeBatch($timeWindow)
                select region, count(eventId) as requestCount, max(_timestamp) as timestamp
                group by region
                insert all events into perRegionOverallAuthenticationProcessedStream;
                from perRegionOverallAuthenticationProcessedStream [ requestCount > $maxRequestCount]
                select region, requestCount, timestamp
                insert into RegionExcessLoginAlert;
                 ]]>
                </template>
            </templates>
            <parameters>
                <parameter name="timeWindow" type="int">
                    <displayName>Time Window</displayName>
                    <description>Time window unit of monitoring events</description>
                    <defaultValue>1000</defaultValue>
                </parameter>
                <parameter name="maxRequestCount" type="int">
                    <displayName>Maximum Request Count</displayName>
                    <description>Maximum request count allowed within the Time Window to avoid alerting</description>
                    <defaultValue>100</defaultValue>
                </parameter>
            </parameters>
        </scenario>

        <scenario type="User Excess Login Alert">
            <description>Send alerts when authentication requests from a particular user exceed a certain number.</description>
            <templates>
                <template type="realTime">
                    <![CDATA[
                @Plan:name('IsAnalytics-ExecutionPlan-AuthenticationData')
                @import('org.wso2.is.analytics.stream.ProcessedOverallAuthentication:1.0.0')
                @Export('org.wso2.is.analytics.stream.UserExcessLoginAlert:1.0.0')
                define stream UserExcessLoginAlert (userStoreDomain string, tenantDomain string, username string, requestCount long, timestamp long);
                from OverallAuthenticationProcessedStream#window.timeBatch($timeWindow)
                select userStoreDomain, tenantDomain, username, count(eventId) as requestCount, max(_timestamp) as timestamp
                group by userStoreDomain, tenantDomain, username
                insert all events into perUserOverallAuthenticationProcessedStream;
                from perUserOverallAuthenticationProcessedStream [ requestCount > $maxRequestCount]
                select userStoreDomain, tenantDomain, username, requestCount, timestamp
                insert into UserExcessLoginAlert;
                 ]]>
                </template>
            </templates>
            <parameters>
            <parameters>
                <parameter name="timeWindow" type="int">
                    <displayName>Time Window</displayName>
                    <description>Time window unit of monitoring events</description>
                    <defaultValue>1000</defaultValue>
                </parameter>
                <parameter name="maxRequestCount" type="int">
                    <displayName>Maximum Request Count</displayName>
                    <description>Maximum request count allowed within the Time Window to avoid alerting</description>
                    <defaultValue>100</defaultValue>
                </parameter>
            </parameters>
            </parameters>
        </scenario>

        <scenario type="Same Account Multiple Users Login Alert">
            <description>Send alerts when authentication requests from a particular user is coming from two different regions within a certain time period.</description>
            <templates>
                <template type="realTime">
                    <![CDATA[
                @Plan:name('IsAnalytics-ExecutionPlan-AuthenticationData')
                @import('org.wso2.is.analytics.stream.ProcessedOverallAuthentication:1.0.0')
                @Export('org.wso2.is.analytics.stream.SameAccountMultipleUsersLoginAlert:1.0.0')
                define stream SameAccountMultipleUsersLoginAlert (userStoreDomain string, tenantDomain string, username string, prevRegion string, newRegion string, timestamp long);
                from every(e1=OverallAuthenticationProcessedStream) -> e2=OverallAuthenticationProcessedStream[ e1.userStoreDomain==userStoreDomain and e1.tenantDomain==tenantDomain and e1.username==username and e1.region!=region ]
                    within 10 sec
                select e1.userStoreDomain, e1.tenantDomain, e1.username, e1.region as prevRegion, e2.region as newRegion, e2._timestamp as timestamp
                insert into SameAccountMultipleUsersLoginAlert;
                 ]]>
                </template>
            </templates>
            <parameters>
                <parameter name="minRegionSwitchTime" type="int">
                    <displayName>Minimum Region Switch Time</displayName>
                    <description>Minimum switching time allowed to move between regions</description>
                    <defaultValue>1000</defaultValue>
                </parameter>
            </parameters>
        </scenario>

    </scenarios>
    <commonArtifacts>
        <artifact type="eventStream">
		{
		  "name": "org.wso2.is.analytics.stream.RegionExcessLoginAlert",
		  "version": "1.0.0",
		  "nickName": "",
		  "description": "",
		  "payloadData": [
		    {
		      "name": "region",
		      "type": "STRING"
		    },
		    {
		      "name": "requestCount",
		      "type": "LONG"
		    },
		    {
		      "name": "timestamp",
		      "type": "LONG"
		    }
		  ]
		}	
        </artifact>
        <artifact type="eventStream">
		{
		  "name": "org.wso2.is.analytics.stream.SameAccountMultipleUsersLoginAlert",
		  "version": "1.0.0",
		  "nickName": "",
		  "description": "",
		  "payloadData": [
		    {
		      "name": "userStoreDomain",
		      "type": "STRING"
		    },
		    {
		      "name": "tenantDomain",
		      "type": "STRING"
		    },
		    {
		      "name": "username",
		      "type": "STRING"
		    },
		    {
		      "name": "prevRegion",
		      "type": "STRING"
		    },
		    {
		      "name": "newRegion",
		      "type": "STRING"
		    },
		    {
		      "name": "timestamp",
		      "type": "LONG"
		    }
		  ]
		}			                                    		
        </artifact>
        <artifact type="eventStream">
		{
		  "name": "org.wso2.is.analytics.stream.UserExcessLoginAlert",
		  "version": "1.0.0",
		  "nickName": "",
		  "description": "",
		  "payloadData": [
		    {
		      "name": "userStoreDomain",
		      "type": "STRING"
		    },
		    {
		      "name": "tenantDomain",
		      "type": "STRING"
		    },
		    {
		      "name": "username",
		      "type": "STRING"
		    },
		    {
		      "name": "requestCount",
		      "type": "LONG"
		    },
		    {
		      "name": "timestamp",
		      "type": "LONG"
		    }
		  ]
		}			                                    		
        </artifact>
    </commonArtifacts>
</domain>
